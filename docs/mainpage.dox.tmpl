/** @mainpage Qore zmq Module

    @tableofcontents

    @section zmqintro zmq Module Introduction

    The \c zmq module provides an API for socket operations based on the <a href="http://zeromq.org">ZeroMQ</a> library.

    Classes provided by this module:
    - @ref Qore::ZMQ::ZFrame "ZFrame"
    - @ref Qore::ZMQ::ZMsg "ZMsg"
    - @ref Qore::ZMQ::ZSocket "ZSocket"
      - @ref Qore::ZMQ::ZSocketDealer "ZSocketDealer"
      - @ref Qore::ZMQ::ZSocketPair "ZSocketPair"
      - @ref Qore::ZMQ::ZSocketPub "ZSocketPub"
      - @ref Qore::ZMQ::ZSocketPull "ZSocketPull"
      - @ref Qore::ZMQ::ZSocketPush "ZSocketPush"
      - @ref Qore::ZMQ::ZSocketRep "ZSocketRep"
      - @ref Qore::ZMQ::ZSocketReq "ZSocketReq"
      - @ref Qore::ZMQ::ZSocketRouter "ZSocketRouter"
      - @ref Qore::ZMQ::ZSocketStream "ZSocketStream"
      - @ref Qore::ZMQ::ZSocketSub "ZSocketSub"
      - @ref Qore::ZMQ::ZSocketXPub "ZSocketXPub"
      - @ref Qore::ZMQ::ZSocketXSub "ZSocketXSub"

    Functions provided by this module:
    - @ref Qore::ZMQ::zmq_curve_keypair() "zmq_curve_keypair()"
    - @ref Qore::ZMQ::zmq_curve_public() "zmq_curve_public()"
    - @ref Qore::ZMQ::zmq_version() "zmq_version()"
    - @ref Qore::ZMQ::zmq_z85_encode() "zmq_z85_encode()"

    Unlike the ZeroMQ C library which uses an unlimited timeout period on socket send and
    receive operations by default, the socket timeout in the %Qore @ref Qore::ZMQ::ZSocket "ZSocket"
    class is set by default to two minutes; to change the default timeout,
    call one of the following methods after creating the object:
    - @ref Qore::ZMQ::ZSocket::setRecvTimeout() "ZSocket::setRecvTimeout()"
    - @ref Qore::ZMQ::ZSocket::setSendTimeout() "ZSocket::setSendTimeout()"
    - @ref Qore::ZMQ::ZSocket::setTimeout() "ZSocket::setTimeout()"

    @par Timeout Example:
    @code{.py}
    # create a ROUTER socket on all devices on a wildcard/random port
    ZSocketRouter sock(zctx, name, "tcp://*:*");
    # set the default send and receive timeout to unlimited (never time out)
    sock.setTimeout(-1);
    # print out the URL with the actual port number
    printf("queue URL bound to: %y\n", sock.endpoint());
    @endcode

    @section zmq_examples Examples

    @par Example:
    @code{.py}
 #!/usr/bin/env qore

 %new-style
 %require-types
 %strict-args
 %enable-all-warnings

 %requires zmq
    @endcode

    @section zmqendpoints zmq Endpoints

    Endpoints have the following format:
    - <tt><i>[@@|>]transport</i>://<i>address</i></tt>

    Endpoint prefixes have the following meaning:
    - \c @@: bind the socket
    - \c >: connect to the remote socket

    Example transports:
    - <tt>tcp://</tt>: for TCP socket connections
    - <tt>inproc://</tt>: for in-process connections

    @subsection zmqendpoints_tcp Binding TCP Endpoints

    <tt>tcp://</tt> endpoints support binding on a random free port if you specify the port number as \c "*", \c "!", or \c 0 and support binding on all interfaces if you specify the interface or host name as \c "*".

    <b>Examples</b>
    |!Endpoint|!Description
    |<tt>@@tcp://127.0.0.1:0</tt>|bind to random port on localhost
    |<tt>@@tcp://127.0.0.1:*</tt>|bind to random port on localhost
    |<tt>@@tcp://127.0.0.1:!</tt>|bind to random port on localhost
    |<tt>@@tcp://*:0</tt>|bind to random port on all interfaces
    |<tt>@@tcp://*:*</tt>|bind to random port on all interfaces
    |<tt>@@tcp://*:!</tt>|bind to random port on all interfaces

    @section zmqerrors zmq Errors

    Generally exceptions are thrown if an error occurs in ZeroMQ calls.  In such cases, the \c arg key of the exception hash will contain the ZeroMQ \a errno value.

    @section zmqencryption zmq Encryption

    Encryption is supported using the <a href="http://curvezmq.org/">Curve</a> implementation in ZeroMQ.

    Encryption keys must be either 32-byte binary values or 40-byte Z85 formatted printable strings.
    Z85 formatted printable strings can be generated with the @ref Qore::ZMQ::zmq_z85_encode() "zmq_z85_encode()".

    A public key must be generated from the private key; this can be done with either the
    @ref Qore::ZMQ::zmq_curve_keypair() "zmq_curve_keypair()" function, which generates a random private key
    and a matching public key, or with the @ref Qore::ZMQ::zmq_curve_public() "zmq_curve_public()"
    function.

    Encryption options are set with the @ref Qore::ZMQ::ZSocket::setOption() "ZSocket::setOption()" method; see
    the following example for information on how to set the encryption settings on the client and the server.

    @par Example:
    @code{.py}
# generate a printable random server key
string server_secret = zmq_z85_encode(get_random_bytes(32));
# generate the corresponding public key
string server_pub = zmq_curve_public(server_secret);
# generate a printable random client key
string client_secret = zmq_z85_encode(get_random_bytes(32));
# generate the corresponding public key
string client_pub = zmq_curve_public(client_secret);

# create the server socket
ZSocketRouter server(zctx, "my-server");
# set encryption options; ZMQ_CURVE_SERVER must only be set on the server
server.setOption(ZMQ_CURVE_SERVER, 1);
server.setOption(ZMQ_CURVE_SECRETKEY, server_secret);
server.setOption(ZMQ_CURVE_PUBLICKEY, server_pub);
# bind the server on a random port
server.bind("tcp://127.0.0.1:*");

# create the client socket
ZSocketDealer client(zctx, "my-client");
# set encryption options; ZMQ_CURVE_SERVER must only be set on the server
client.setOption(ZMQ_CURVE_SERVER, 0);
client.setOption(ZMQ_CURVE_SERVERKEY, server_pub);
client.setOption(ZMQ_CURVE_SECRETKEY, client_secret);
client.setOption(ZMQ_CURVE_PUBLICKEY, client_pub);

# connect to the server
client.connect(server.endpoint());

# now we can send data
client.send(HelloWorld);
ZMsg msg = server.recvMsg();
    @endcode

    @section zmqreleasenotes zmq Module Release Notes

    @subsection zmq_1_0_1 zmq Module Version 1.0.1
    - fixed a crash with newer versions of ZeroMQ where \c zmq_ctx_destroy() cannot be called after \c zmq_ctx_term()
      as it will cause a core dump
      (<a href="https://github.com/qorelanguage/qore/issues/4446">issue 4446</a>)

    @subsection zmq_1_0 zmq Module Version 1.0
    - initial public release
*/

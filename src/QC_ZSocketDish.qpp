/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketDish.qpp defines the ZSocketDish class */
/*
  QC_ZSocketDish.qpp

  Qore Programming Language

  Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as dishlished by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketDish.h"

//! The ZSocketDish class implements a ZeroMQ DISH socket
/** @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
 */
qclass ZSocketDish [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a DISH zsocket
/** @par Example
    @code{.py}
ZSocketDish sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is bind

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-BIND-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketDish::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETDISH, new QoreDishZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected DISH zsocket
/** @par Example
    @code{.py}
ZSocketDish sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketDish::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETDISH, new QoreDishZSock(*ctx, nullptr, xsink));
}

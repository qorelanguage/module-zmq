/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketDealer.qpp defines the ZSocketDealer class */
/*
    QC_ZSocketDealer.qpp

    Qore Programming Language

    Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketDealer.h"

//! The ZSocketDealer class implements a ZeroMQ \c DEALER socket
/** A socket of type \c DEALER is an advanced pattern used for extending request/reply
    sockets. Each message sent is round-robined among all connected peers, and each
    message received is fair-queued from all connected peers.
    \n\n
    When a \c DEALER socket enters the mute state due to having reached the high water
    mark for all peers, or if there are no peers at all, then any
    @ref ZSocket::send() "ZSocket::send*()" operations on the socket shall block until
    the mute state ends or at least one peer becomes available for sending; messages
    are not discarded.
    \n\n
    When a \c DEALER socket is connected to a @ref ZSocketRep "REP" socket, each message
    sent must consist of an empty message part, the delimiter, followed by one or more
    body parts.
    \n\n
    <b>Summary of \c DEALER characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketRouter "ROUTER", @ref ZSocketRep "REP", @ref ZSocketDealer "DEALER"
    |Direction|Bidirectional
    |Send/receive pattern|Unrestricted
    |Outgoing routing strategy|Round-robin
    |Incoming routing strategy|Fair-queued
    |Action in mute state|Block

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
    - It is recommended to use an identity with \c DEALER sockets
 */
qclass ZSocketDealer [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c DEALER zsocket with an explicit identity and endpoint
/** @par Example
    @code{.py}
ZSocketDealer sock(ctx, "my-identity", "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param identity the identity value for the socket; a missing or empty value here results in the default identity being assigned
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket

    @note It is recommended to use an identity with \c DEALER sockets
 */
ZSocketDealer::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, *string identity, string endpoint) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    SimpleRefHolder<QoreDealerZSock> dealer(new QoreDealerZSock(*ctx, identity, endpoint->c_str(), xsink));
    if (!*xsink)
        self->setPrivate(CID_ZSOCKETDEALER, dealer.release());
}

//! constructs an unconnected \c DEALER zsocket with a default system-assigned identity
/** @par Example
    @code{.py}
# create an unconnected DEALER socket
ZSocketDealer dealer(zctx);
# set the dealer's identity value explicitly before connecting
dealer.setIdentity(DealerIdentity);
dealer.connect("tcp://127.0.0.1:" + port);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket

    @note It is recommended to use an identity with \c DEALER sockets
 */
ZSocketDealer::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETDEALER, new QoreDealerZSock(*ctx, nullptr, nullptr, xsink));
}

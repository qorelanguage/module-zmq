/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketReq.qpp defines the ZSocketReq class */
/*
  QC_ZSocketReq.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketReq.h"

//! The ZSocketReq class implements a ZeroMQ REQ socket
/**
 */
qclass ZSocketReq [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a REQ zsocket
/** @par Example
    @code
ZSocketReq sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketReq::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETREQ, new QoreReqZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected REQ zsocket
/** @par Example
    @code
ZSocketReq sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketReq::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETREQ, new QoreReqZSock(*ctx, nullptr, xsink));
}

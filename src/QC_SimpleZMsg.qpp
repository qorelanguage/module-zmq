/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file SimpleZMsg.qpp defines the SimpleZMsg class */
/*
  QC_SimpleZMsg.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Sublic
  License as sublished by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Sublic License for more details.

  You should have received a copy of the GNU Lesser General Sublic
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "zmq-module.h"

#include "QC_SimpleZMsg.h"
#include "QC_ZFrame.h"

#include <zmsg.h>

int QoreSimpleZMsg::addFrames(const QoreListNode* l, ExceptionSink* xsink) {
   ConstListIterator i(l);
   while (i.next()) {
      if (addFrame(i.getValue(), i.index(), i.max(), xsink))
          return -1;
   }
   return 0;
}

int QoreSimpleZMsg::addFrames(const QoreValueList* l, ExceptionSink* xsink) {
   ConstValueListIterator i(l);
   while (i.next()) {
      if (addFrame(i.getValue(), i.index(), i.max(), xsink))
          return -1;
   }
   return 0;
}

int QoreSimpleZMsg::addFrame(const QoreValue v, int i, int max, ExceptionSink* xsink) {
   switch (v.getType()) {
      case NT_OBJECT: {
         const QoreObject* obj = v.get<const QoreObject>();
         TryPrivateDataRefHolder<QoreZFrame> frame(obj, CID_ZFRAME, xsink);
         if (*xsink)
            return -1;
         if (!frame) {
            TryPrivateDataRefHolder<QoreSimpleZMsg> zmsg(obj, CID_SIMPLEZMSG, xsink);
            if (*xsink)
               return -1;
            if (!zmsg) {
               xsink->raiseException("ZMSG-ERROR", "don't know how to add object of class \"%s\" in position %d/%d", obj->getClassName(), i, max);
               return -1;
            }
            int rc = zmsg_addmsg(msg, zmsg->getPtr());
            if (rc) {
               zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmsg()");
               return -1;
            }
         }
         else {
            int rc = zmsg_append(msg, frame->getPtr());
            if (rc) {
               zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_append()");
               return -1;
            }
         }
         const_cast<QoreObject*>(obj)->doDelete(xsink);
         if (*xsink)
            return -1;
         break;
      }
      case NT_STRING: {
         const QoreStringNode* str = v.get<const QoreStringNode>();
         int rc = zmsg_addmem(msg, str->c_str(), str->size());
         if (rc) {
            zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
            return -1;
         }
         break;
      }
      case NT_BINARY: {
         const BinaryNode* b = v.get<const BinaryNode>();
         int rc = zmsg_addmem(msg, b->getPtr(), b->size());
         if (rc) {
            zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
            return -1;
         }
         break;
      }
      default:
         xsink->raiseException("ZMSG-ERROR", "don't know how to add type \"%s\" in position %d/%d", v.getTypeName(), i, max);
         return -1;
   }
   return 0;
}

//! The SimpleZMsg class implements a ZeroMQ message
/** This class does not support modifications after the constructor in order to remain lock-free

    @see the @ref Qore::ZMQ::ZMsg "ZMsg"
 */
qclass SimpleZMsg [arg=QoreSimpleZMsg* msg; ns=Qore::ZMQ];

//! constructs a SimpleZMsg from the @ref Qore::ZMQ::ZFrame "ZFrame" objects supplied
/** @par Example
    @code
SimpleZMsg msg(frame1, frame2);
    @endcode

    @param ... zero or more values to add to the message as frames; values are processed as follows:
    - @ref OMQ::ZMQ::ZFrame "ZFrame": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::ZFrame "ZFrame" object while processing
    - @ref OMQ::ZMQ::SimpleZMsg "SimpleZMsg": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::SimpleZMsg "SimpleZMsg" object while processing
    - \c string: copies the string data to the message
    - \c binary: copies the binary data to the message

 */
SimpleZMsg::constructor() {
   ReferenceHolder<QoreSimpleZMsg> msg(new QoreSimpleZMsg, xsink);
   if (msg->addFrames(args, xsink))
      return;
   self->setPrivate(CID_SIMPLEZMSG, msg.release());
}

//! constructs a SimpleZMsg from the list of @ref Qore::ZMQ::ZFrame "ZFrame" objects supplied
/** @par Example
    @code
SimpleZMsg msg(l);
    @endcode

 */
SimpleZMsg::constructor(list l) {
   ReferenceHolder<QoreSimpleZMsg> msg(new QoreSimpleZMsg, xsink);
   if (msg->addFrames(l, xsink))
      return;
   self->setPrivate(CID_SIMPLEZMSG, msg.release());
}

//! copies a SimpleZMsg object
/** @par Example
    @code
SimpleZMsg msg_new = msg.copy();
    @endcode
 */
SimpleZMsg::copy() {
   self->setPrivate(CID_SIMPLEZMSG, new QoreSimpleZMsg(*msg));
}

//! Returns the number of frames in the message
/** @par Example
    @code
int size = msg.size();
    @endcode
 */
int SimpleZMsg::size() [flags=CONSTANT] {
   return zmsg_size(**msg);
}

//! Returns the byte size of all frames in the message
/** @par Example
    @code
int size = msg.contentSize();
    @endcode
 */
int SimpleZMsg::contentSize() [flags=CONSTANT] {
   return zmsg_content_size(**msg);
}

//! Returns @ref Qore::True "True" if two msgs have identical size and data
/** @par Example
    @code
bool b = msg.more();
    @endcode

    @param frm the msg to compare

    @return @ref Qore::True "True" if two msgs have identical size and data
*/
bool SimpleZMsg::eq(SimpleZMsg[QoreSimpleZMsg] frm) [flags=CONSTANT] {
   ReferenceHolder<QoreSimpleZMsg> holder(frm, xsink);

   return zmsg_eq(**msg, **frm);
}

//! Sends a message to the zsys log sink (may be stdout, or system facility)
/** @par Example
    @code
msg.print();
    @endcode
*/
nothing SimpleZMsg::print() {
   zmsg_print(**msg);
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketPub.qpp defines the ZSocketPub class */
/*
  QC_ZSocketPub.qpp

  Qore Programming Language

  Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketPub.h"

//! The ZSocketPub class implements a ZeroMQ PUB socket
/** A socket of type \c PUB is used by a publisher to distribute data. Messages sent are
    distributed in a fan out fashion to all connected peers. The
    @ref ZSocket::recvMsg() "ZSocket::recv*()" methods are not implemented for this socket type.

    When a \c PUB socket enters the mute state due to having reached the high water mark
    for a subscriber, then any messages that would be sent to the subscriber in question
    shall instead be dropped until the mute state ends. The @ref ZSocket::send() "ZSocket::send*()"
    methods shall never block for this socket type.
    \n\n
    <b>Summary of \c PUB characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketSub "SUB", @ref ZSocketXSub "XSUB"
    |Direction|Unidirectional
    |Send/receive pattern|Send only
    |Incoming routing strategy|N/A
    |Outgoing routing strategy|Fan out
    |Action in mute state|Drop

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
 */
qclass ZSocketPub [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a PUB zsocket
/** @par Example
    @code{.py}
ZSocketPub sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is bind

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-BIND-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketPub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPUB, new QorePubZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected PUB zsocket
/** @par Example
    @code{.py}
ZSocketPub sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketPub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPUB, new QorePubZSock(*ctx, nullptr, xsink));
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZMsg.qpp defines the ZMsg class */
/*
    QC_ZMsg.qpp

    Qore Programming Language

    Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as sublished by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "zmq-module.h"

#include "QC_ZMsg.h"
#include "QC_ZFrame.h"

#include <zmsg.h>

#include <stdio.h>

int QoreZMsg::addFrames(const QoreListNode* l, ExceptionSink* xsink) {
    ConstListIterator i(l);
    while (i.next()) {
        if (addFrame(i.getValue(), i.index(), i.max(), xsink))
            return -1;
    }
    return 0;
}

int QoreZMsg::addFrame(const QoreValue v, int i, int max, ExceptionSink* xsink) {
    switch (v.getType()) {
        case NT_OBJECT: {
            const QoreObject* obj = v.get<const QoreObject>();
            TryPrivateDataRefHolder<QoreZFrame> frame(obj, CID_ZFRAME, xsink);
            if (*xsink)
                return -1;
            if (!frame) {
                TryPrivateDataRefHolder<QoreZMsg> zmsg(obj, CID_ZMSG, xsink);
                if (*xsink)
                    return -1;
                if (!zmsg) {
                    xsink->raiseException("ZMSG-ERROR", "don't know how to add object of class \"%s\" in position %d/%d", obj->getClassName(), i, max);
                    return -1;
                }
                int rc = zmsg_addmsg(msg, zmsg->getPtr());
                if (rc) {
                    zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmsg()");
                    return -1;
                }
            }
            else {
                int rc = zmsg_append(msg, frame->getPtr());
                if (rc) {
                    zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_append()");
                    return -1;
                }
            }
            const_cast<QoreObject*>(obj)->doDelete(xsink);
            if (*xsink)
                return -1;
            break;
        }
        case NT_STRING: {
            const QoreStringNode* str = v.get<const QoreStringNode>();
            int rc = zmsg_addmem(msg, str->c_str(), str->size());
            if (rc) {
                zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
                return -1;
            }
            break;
        }
        case NT_BINARY: {
            const BinaryNode* b = v.get<const BinaryNode>();
            int rc = zmsg_addmem(msg, b->getPtr(), b->size());
            if (rc) {
                zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
                return -1;
            }
            break;
        }
        default:
            xsink->raiseException("ZMSG-ERROR", "don't know how to add type \"%s\" in position %d/%d", v.getTypeName(), i, max);
            return -1;
    }
    return 0;
}

//! The ZMsg class implements a ZeroMQ message
/** @note
    - In general, the ZMsg class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause a
      \c ZMSG-THREAD-ERROR to be thrown.
 */
qclass ZMsg [arg=QoreZMsg* msg; ns=Qore::ZMQ];

//! constructs a ZMsg from the arguments supplied
/** @par Example:
    @code{.py}
ZMsg msg(frame1, frame2);
    @endcode

    @param ... zero or more values to add to the message as frames; values are processed as follows:
    - @ref Qore::ZMQ::ZFrame "ZFrame": the object is moved into the message, this call deletes the @ref Qore::ZMQ::ZFrame "ZFrame" object while processing
    - @ref Qore::ZMQ::ZMsg "ZMsg": the object is moved into the message, this call deletes the @ref Qore::ZMQ::ZMsg "ZMsg" object while processing
    - \c string: copies the string data to the message
    - \c binary: copies the binary data to the message

    @throw ZMSG-ERROR unsupported data type passed as an argument
 */
ZMsg::constructor(...) {
    ReferenceHolder<QoreZMsg> msg(new QoreZMsg, xsink);
    if (args && msg->addFrames(args, xsink))
        return;
    self->setPrivate(CID_ZMSG, msg.release());
}

//! constructs a ZMsg from the list of arguments supplied
/** @par Example:
    @code{.py}
ZMsg msg(l);
    @endcode

    @param l zero or more values to add to the message as frames; values are processed as follows:
    - @ref Qore::ZMQ::ZFrame "ZFrame": the object is moved into the message, this call deletes the @ref Qore::ZMQ::ZFrame "ZFrame" object while processing
    - @ref Qore::ZMQ::ZMsg "ZMsg": the object is moved into the message, this call deletes the @ref Qore::ZMQ::ZMsg "ZMsg" object while processing
    - \c string: copies the string data to the message
    - \c binary: copies the binary data to the message

    @throw ZMSG-ERROR unsupported data type passed as an argument
 */
ZMsg::constructor(list l) {
    ReferenceHolder<QoreZMsg> msg(new QoreZMsg, xsink);
    if (msg->addFrames(l, xsink))
        return;
    self->setPrivate(CID_ZMSG, msg.release());
}

//! copies a ZMsg object
/** @par Example:
    @code{.py}
ZMsg msg_new = msg.copy();
    @endcode

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
ZMsg::copy() {
    if (msg->check(xsink))
        return;

    self->setPrivate(CID_ZMSG, new QoreZMsg(*msg));
}

//! Serializes a multipart message to a single message frame
/** @par Example:
    @code{.py}
ZFrame frm = msg.encode();
    @endcode

    Use this method to send structured messages across transports that do not support
    multipart data. Creates a new @ref Qore::ZMQ::ZFrame "ZFrame" object containing the serialized message.

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it

    @see @ref Qore::ZMQ::ZFrame::decode() "ZFrame::decode()"
*/
ZFrame ZMsg::encode() [flags=CONSTANT] {
    if (msg->check(xsink))
        return QoreValue();

#ifdef HAVE_ZMSG_ENCODE_TO_ZFRAME
    return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(zmsg_encode(**msg)));
#elif defined(HAVE_ZMSG_ENCODE_TO_BUFFER)
    byte* p;
    size_t len = zmsg_encode(**msg, &p);
    return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(p, len));
#else
#error do not know how to use the zmsg_encode() function
#endif
}

//! Returns meta data property for the first frame in the message
/** @par Example
    @code{.py}
*string str = msg.meta("Socket-Type");
    @endcode

    @param property a meta-data property for the first frame in the message; the string is converted to UTF-8 encoding if necessary; the following properties are available:
    - \c "Socket-Type":
    - \c "Identity":
    - \c "Resource":
    - \c "Peer-Address" if supported by the undelying transport; this property will return the IP address of the remote endpoint as returned by \c getnameinfo(2).

    @return a string in UTF-8 encoding giving the property value or @ref nothing if no such property is set for the frame

    @throw MISSING-FEATURE-ERROR thrown if the underlying czmq library is missing the \c zframe_meta() function; check @ref Qore::ZMQ::HAVE_ZFRAME_META "HAVE_ZFRAME_META" before calling this method
    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to UTF-8

    @note
    - the input string is converted to UTF-8 encoding if necessary
    - Other properties may be defined based on the underlying security mechanism
    - only available if the underlying library supports it; check @ref Qore::ZMQ::HAVE_ZFRAME_META "HAVE_ZFRAME_META" before calling this method
 */
*string ZMsg::meta(string property) [flags=CONSTANT] {
#ifdef HAVE_ZFRAME_META
    if (msg->check(xsink))
        return QoreValue();

    TempEncodingHelper prop(property, QCS_UTF8, xsink);
    if (*xsink)
        return QoreValue();

    zframe_t* frame = zmsg_first(**msg);
    if (!frame)
        return QoreValue();

    // note that the zcmq documentation is incorrect; a non-null return value must not
    // be free()d; it is implemented with zmq_msg_gets() which returns a string that
    // belongs to the zmq_msg_t object
    const char* val = zframe_meta(frame, prop->c_str());
    return val ? QoreValue(new QoreStringNode(val, QCS_UTF8)) : QoreValue();
#else
    xsink->raiseException("MISSING-FEATURE-ERROR", "the underlying czmq library is missing a function required to implement this method; check HAVE_ZFRAME_META before calling");
#endif
}

//! Pushes a frame to the end of the message; the frame is consumed by this call
/** @par Example:
    @code{.py}
msg.add(frame);
    @endcode

    @param frame the frame to add to the end of the message; the argument object will be deleted by this call

    @throw ZMSG-APPEND-ERROR this exception is thrown if any error occurs adding the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
nothing ZMsg::add(Qore::ZMQ::ZFrame[QoreZFrame] frame) {
    ReferenceHolder<QoreZFrame> holder(frame, xsink);

    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_append(**msg, frame->getPtr());
    if (rc)
        zmq_error(xsink, "ZMSG-APPEND-ERROR", "error in zmsg_append()");
    if (!frame->getPtr())
        const_cast<QoreObject*>(obj_frame)->doDelete(xsink);
}

//! Adds a string as a block of memory to the end of the message as a new frame
/** @par Example:
    @code{.py}
msg.add(str);
    @endcode

    @param str the string to add to the end of the message

    @throw ZMSG-ADD-ERROR this exception is thrown if any error occurs adding the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
nothing ZMsg::add(string str) {
    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_addmem(**msg, str->c_str(), str->size());
    if (rc)
        zmq_error(xsink, "ZMSG-ADD-ERROR", "error in zmsg_addmem()");
}

//! Adds a binary object to the end of the message as a new frame
/** @par Example:
    @code{.py}
msg.add(bin);
    @endcode

    @param bin the binary object to add to the end of the message

    @throw ZMSG-ADD-ERROR this exception is thrown if any error occurs adding the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
nothing ZMsg::add(binary bin) {
    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_addmem(**msg, bin->getPtr(), bin->size());
    if (rc)
        zmq_error(xsink, "ZMSG-ADD-ERROR", "error in zmsg_addmem()");
}

//! Adds a message to the end of the message as a submessage; the message argument is consumed by this call
/** @par Example:
    @code{.py}
msg.add(msg);
    @endcode

    @param submsg the submessage to add to the end of the message; this object is deleted by this call

    @throw ZMSG-ADD-ERROR this exception is thrown if any error occurs adding the submessage to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
nothing ZMsg::add(Qore::ZMQ::ZMsg[QoreZMsg] submsg) {
    ReferenceHolder<QoreZMsg> holder(submsg, xsink);

    if (msg->check(xsink) || submsg->check(xsink))
        return QoreValue();

    int rc = zmsg_addmsg(**msg, submsg->getPtr());
    if (rc)
        zmq_error(xsink, "ZMSG-ADD-ERROR", "error in zmsg_addmsg()");
    if (!submsg->getPtr())
        const_cast<QoreObject*>(obj_submsg)->doDelete(xsink);
}

//! Pushes a string as a block of memory to the beginning of the message as a new frame
/** @par Example:
    @code{.py}
msg.push(str);
    @endcode

    @param the string to add to the beginning of the message

    @throw ZMSG-PUSH-ERROR this exception is thrown if any error occurs adding the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
nothing ZMsg::push(string str) {
    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_pushmem(**msg, str->c_str(), str->size());
    if (rc)
        zmq_error(xsink, "ZMSG-ADD-ERROR", "error in zmsg_pushmem()");
}

//! Pushes a block of memory to the beginning of the message as a new frame
/** @par Example:
    @code{.py}
msg.push(bin);
    @endcode

    @param the string to add to the beginning of the message

    @throw ZMSG-PUSH-ERROR this exception is thrown if any error occurs adding the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
nothing ZMsg::push(binary bin) {
    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_pushmem(**msg, bin->getPtr(), bin->size());
    if (rc)
        zmq_error(xsink, "ZMSG-PUSH-ERROR", "error in zmsg_pushmem()");
}

//! Pushes a frame to the beginning of the message, i.e. before all other frames; the frame is consumed by this call
/** @par Example:
    @code{.py}
msg.push(frame);
    @endcode

    @param frame the frame to add to the beginning of the message; the argument object will be deleted by this call

    @throw ZMSG-PREPEND-ERROR this exception is thrown if any error occurs prepending the frame to the message
    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
nothing ZMsg::push(Qore::ZMQ::ZFrame[QoreZFrame] frame) {
    ReferenceHolder<QoreZFrame> holder(frame, xsink);

    if (msg->check(xsink))
        return QoreValue();

    int rc = zmsg_prepend(**msg, frame->getPtr());
    if (rc)
        zmq_error(xsink, "ZMSG-PREPEND-ERROR", "error in zmsg_prepend()");
    if (!frame->getPtr())
        const_cast<QoreObject*>(obj_frame)->doDelete(xsink);
}

//! Removes and returns the first frame from the message, if any
/** @par Example:
    @code{.py}
*ZFrame frame = msg.popFrame();
    @endcode

    @return the first frame from the message, if any; if no frame is present, @ref nothing is returned

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
*ZFrame ZMsg::popFrame() {
    if (msg->check(xsink))
        return QoreValue();

    zframe_t* frame = zmsg_pop(**msg);
    if (!frame)
        return QoreValue();

    return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(frame));
}

//! Removes and returns the first submessage from message, if any
/** @par Example:
    @code{.py}
*ZFrame msg = msg.popMsg();
    @endcode

    @return the first submessage from the message, if any; if the first frame is not a submessage or the message contains no frames, @ref nothing is returned

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it

    @note this call consumes the first frame whether it's a submessage or not
 */
*ZMsg ZMsg::popMsg() {
    if (msg->check(xsink))
        return QoreValue();

    zmsg_t* nmsg = zmsg_popmsg(**msg);
    if (!nmsg)
        return QoreValue();

    return new QoreObject(QC_ZMSG, getProgram(), new QoreZMsg(nmsg));
}

//! Pops the first frame off the front of message and returns it as a string
/** @par Example:
    @code{.py}
*string str = msg.popStr();
    @endcode

    @param encoding the character encoding tag for the string return value; if not present, the @ref default_encoding "default character encoding" is assumed.

    @return a string corresponding to the first frame which is removed from the message; if no frame is present @ref nothing is returned

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
*string ZMsg::popStr(*string encoding) {
    if (msg->check(xsink))
        return QoreValue();

    char* str = zmsg_popstr(**msg);
    if (!str)
        return QoreValue();

    const QoreEncoding* qe = encoding ? QEM.findCreate(encoding) : QCS_DEFAULT;
    size_t len = strlen(str);
    return new QoreStringNode(str, len, len + 1, qe);
}

//! Pops the first frame off the front of message and returns it as a binary value
/** @par Example:
    @code{.py}
*binary str = msg.popBin();
    @endcode

    @return a binary value corresponding to the first frame which is removed from the message; if no frame is present @ref nothing is returned

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
*binary ZMsg::popBin(*string encoding) {
    if (msg->check(xsink))
        return QoreValue();

    zframe_t* frame = zmsg_pop(**msg);
    if (!frame)
        return QoreValue();
    ON_BLOCK_EXIT(zframe_destroy, &frame);

    size_t size = zframe_size(frame);
    if (!size)
        return QoreValue();
    return new BinaryNode(zframe_strdup(frame), size);
}

//! Returns the signal value, 0 or greater, if message is a signal, -1 if not
/** @par Example:
    @code{.py}
int size = msg.signal();
    @endcode

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
 */
int ZMsg::signal() [flags=CONSTANT] {
    if (msg->check(xsink))
        return QoreValue();

    return zmsg_signal(**msg);
}

//! Sets a routing ID on the message for use with \c SERVER sockets
/** @par Example:
    @code{.py}
msg.setRoutingId(routing_id);
    @endcode

    @param routing_id a routing ID for the message

    @throw MISSING-FEATURE-ERROR thrown if the underlying czmq library is missing draft APIs; check @ref Qore::ZMQ::HAVE_ZMQ_DRAFT_APIS "HAVE_ZMQ_DRAFT_APIS" before calling this method

    @note
    - only available if the underlying library supports it; check @ref Qore::ZMQ::HAVE_ZMQ_DRAFT_APIS "HAVE_ZMQ_DRAFT_APIS" before calling this method
*/
nothing ZMsg::setRoutingId(int routing_id) {
    if (msg->check(xsink))
        return QoreValue();

#ifdef QORE_BUILD_ZMQ_DRAFT
    zmsg_set_routing_id(**msg, (int)routing_id);
#else
    xsink->raiseException("MISSING-FEATURE-ERROR", "the underlying czmq library is missing a function required to implement this method; check HAVE_ZMQ_DRAFT_APIS before calling");
    return QoreValue();
#endif
}

//! Returns a routing ID greater than 0 if the message is from a \c SERVER socket, 0 if not
/** @par Example:
    @code{.py}
int routing_id = msg.routingId();
    @endcode

    @return a routing ID greater than 0 if the message is from a \c SERVER socket, 0 if not

    @throw MISSING-FEATURE-ERROR thrown if the underlying czmq library is missing draft APIs; check @ref Qore::ZMQ::HAVE_ZMQ_DRAFT_APIS "HAVE_ZMQ_DRAFT_APIS" before calling this method

    @note
    - only available if the underlying library supports it; check @ref Qore::ZMQ::HAVE_ZMQ_DRAFT_APIS "HAVE_ZMQ_DRAFT_APIS" before calling this method
*/
int ZMsg::routingId() [flags=CONSTANT] {
    if (msg->check(xsink))
        return QoreValue();

#ifdef QORE_BUILD_ZMQ_DRAFT
    return zmsg_routing_id(**msg);
#else
    xsink->raiseException("MISSING-FEATURE-ERROR", "the underlying czmq library is missing a function required to implement this method; check HAVE_ZMQ_DRAFT_APIS before calling");
    return QoreValue();
#endif
}

//! Returns the number of frames in the message
/** @par Example:
    @code{.py}
int size = msg.size();
    @endcode

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it

    @see contentSize()
 */
int ZMsg::size() [flags=CONSTANT] {
    if (msg->check(xsink))
        return QoreValue();

    return zmsg_size(**msg);
}

//! Returns the byte size of all frames in the message
/** @par Example:
    @code{.py}
int size = msg.contentSize();
    @endcode

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it

    @see size()
 */
int ZMsg::contentSize() [flags=CONSTANT] {
    if (msg->check(xsink))
        return QoreValue();

    return zmsg_content_size(**msg);
}

//! Returns @ref Qore::True "True" if two msgs have identical size and data
/** @par Example:
    @code{.py}
bool b = msg.more();
    @endcode

    @param msg2 the message to compare

    @return @ref Qore::True "True" if two msgs have identical size and data

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
bool ZMsg::eq(ZMsg[QoreZMsg] msg2) [flags=CONSTANT] {
    ReferenceHolder<QoreZMsg> holder(msg2, xsink);

    if (msg->check(xsink))
        return QoreValue();

    return zmsg_eq(**msg, **msg2);
}

//! Sends a message to the zsys log sink (may be stdout, or system facility)
/** @par Example:
    @code{.py}
msg.print();
    @endcode

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
*/
nothing ZMsg::print() {
    if (msg->check(xsink))
        return QoreValue();

    zmsg_print(**msg);
}

//! Saves the message contents to an open file
/** @par Example:
    @code{.py}
File f();
f.open(file_name, O_CREAT|O_WRONLY|O_TRUNC);
msg.save(f);
    @endcode

    @param file the file to save the data to; must be open for writing

    The message is saved as a series of frames, each with length and data.

    @throw ZMSG-THREAD-ERROR this exception is thrown when the object is used in a thread other than the one that created it
    @throw ZMSG-SAVE-ERROR if there is any error saving the data, this exception is thrown

    @note The file is NOT guaranteed to be portable between operating systems, not
    versions of CZMQ. The file format is at present undocumented and liable
    to arbitrary change.
*/
nothing ZMsg::save(Qore::File[File] file) {
    ReferenceHolder<File> holder(file, xsink);

    if (msg->check(xsink))
        return QoreValue();

    if (!file->isOpen()) {
        xsink->raiseException("ZMSG-SAVE-ERROR", "File is not open");
        return QoreValue();
    }

    FILE* f = fdopen(dup(file->getFD()), "w");
    if (!f) {
        xsink->raiseErrnoException("ZMSG-SAVE-ERROR", errno, "error writing to File");
        return QoreValue();
    }
    ON_BLOCK_EXIT(fclose, f);
    int rc = zmsg_save(**msg, f);
    if (rc)
        zmq_error(xsink, "ZMSG-SAVE-ERROR", "error in zmsg_save()");
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZMsg.qpp defines the ZMsg class */
/*
  QC_ZMsg.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Sublic
  License as sublished by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Sublic License for more details.

  You should have received a copy of the GNU Lesser General Sublic
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "zmq-module.h"

#include "QC_ZMsg.h"
#include "QC_ZFrame.h"

#include <zmsg.h>

#include <stdio.h>

int QoreZMsg::addFrames(const QoreListNode* l, ExceptionSink* xsink) {
   ConstListIterator i(l);
   while (i.next()) {
      if (addFrame(i.getValue(), i.index(), i.max(), xsink))
          return -1;
   }
   return 0;
}

int QoreZMsg::addFrames(const QoreValueList* l, ExceptionSink* xsink) {
   ConstValueListIterator i(l);
   while (i.next()) {
      if (addFrame(i.getValue(), i.index(), i.max(), xsink))
          return -1;
   }
   return 0;
}

int QoreZMsg::addFrame(const QoreValue v, int i, int max, ExceptionSink* xsink) {
   switch (v.getType()) {
      case NT_OBJECT: {
         const QoreObject* obj = v.get<const QoreObject>();
         TryPrivateDataRefHolder<QoreZFrame> frame(obj, CID_ZFRAME, xsink);
         if (*xsink)
            return -1;
         if (!frame) {
            TryPrivateDataRefHolder<QoreZMsg> zmsg(obj, CID_ZMSG, xsink);
            if (*xsink)
               return -1;
            if (!zmsg) {
               xsink->raiseException("ZMSG-ERROR", "don't know how to add object of class \"%s\" in position %d/%d", obj->getClassName(), i, max);
               return -1;
            }
            int rc = zmsg_addmsg(msg, zmsg->getPtr());
            if (rc) {
               zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmsg()");
               return -1;
            }
         }
         else {
            int rc = zmsg_append(msg, frame->getPtr());
            if (rc) {
               zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_append()");
               return -1;
            }
         }
         const_cast<QoreObject*>(obj)->doDelete(xsink);
         if (*xsink)
            return -1;
         break;
      }
      case NT_STRING: {
         const QoreStringNode* str = v.get<const QoreStringNode>();
         int rc = zmsg_addmem(msg, str->c_str(), str->size());
         if (rc) {
            zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
            return -1;
         }
         break;
      }
      case NT_BINARY: {
         const BinaryNode* b = v.get<const BinaryNode>();
         int rc = zmsg_addmem(msg, b->getPtr(), b->size());
         if (rc) {
            zmq_error(xsink, "ZMSG-ERROR", "error in zmsg_addmem()");
            return -1;
         }
         break;
      }
      default:
         xsink->raiseException("ZMSG-ERROR", "don't know how to add type \"%s\" in position %d/%d", v.getTypeName(), i, max);
         return -1;
   }
   return 0;
}

//! The ZMsg class implements a ZeroMQ message
/** @note
    - In general, the ZMsg class is not designed to be accessed from multiple threads; it was created without locking for
      fast and efficient use when used from a single thread.  For methods that would be unsafe to use in another thread, any use of
      such methods in threads other than the thread where the constructor was called will cause a
      \c ZMSG-THREAD-ERROR to be thrown.
 */
qclass ZMsg [arg=QoreZMsg* msg; ns=Qore::ZMQ];

//! constructs a ZMsg from the @ref Qore::ZMQ::ZFrame "ZFrame" objects supplied
/** @par Example:
    @code
ZMsg msg(frame1, frame2);
    @endcode

    @param ... zero or more values to add to the message as frames; values are processed as follows:
    - @ref OMQ::ZMQ::ZFrame "ZFrame": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::ZFrame "ZFrame" object while processing
    - @ref OMQ::ZMQ::ZMsg "ZMsg": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::ZMsg "ZMsg" object while processing
    - \c string: copies the string data to the message
    - \c binary: copies the binary data to the message

    @throw ZMSG-ERROR unsupported data type passed as an argument
 */
ZMsg::constructor(...) {
   ReferenceHolder<QoreZMsg> msg(new QoreZMsg, xsink);
   if (args && msg->addFrames(args, xsink))
      return;
   self->setPrivate(CID_ZMSG, msg.release());
}

//! constructs a ZMsg from the list of @ref Qore::ZMQ::ZFrame "ZFrame" objects supplied
/** @par Example:
    @code
ZMsg msg(l);
    @endcode

    @param l zero or more values to add to the message as frames; values are processed as follows:
    - @ref OMQ::ZMQ::ZFrame "ZFrame": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::ZFrame "ZFrame" object while processing
    - @ref OMQ::ZMQ::ZMsg "ZMsg": the object is moved into the message, this call deletes the @ref OMQ::ZMQ::ZMsg "ZMsg" object while processing
    - \c string: copies the string data to the message
    - \c binary: copies the binary data to the message

    @throw ZMSG-ERROR unsupported data type passed as an argument
 */
ZMsg::constructor(list l) {
   ReferenceHolder<QoreZMsg> msg(new QoreZMsg, xsink);
   if (msg->addFrames(l, xsink))
      return;
   self->setPrivate(CID_ZMSG, msg.release());
}

//! copies a ZMsg object
/** @par Example:
    @code
ZMsg msg_new = msg.copy();
    @endcode
 */
ZMsg::copy() {
   if (check(xsink))
      return;
   self->setPrivate(CID_ZMSG, new QoreZMsg(*msg));
}

//! Serializes a multipart message to a single message frame
/** @par Example:
    @code
ZFrame frm = msg.encode();
    @endcode

    Use this method to send structured messages across transports that do not support
    multipart data. Allocates and returns a new frame containing the serialized message.

    @see Qore::ZMQ::ZFrame::decode() "ZFrame::decode()"
*/
ZFrame ZMsg::encode() [flags=CONSTANT] {
   if (check(xsink))
      return QoreValue();
#ifdef HAVE_ZMSG_ENCODE_TO_ZFRAME
   return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(zmsg_encode(**msg)));
#elif defined(HAVE_ZMSG_ENCODE_TO_BUFFER)
   byte* p;
   size_t len = zmsg_encode(**msg, &p);
   return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(p, len));
#else
#error do not know how to use the zmsg_encode() function
#endif
}

//! Returns the signal value, 0 or greater, if message is a signal, -1 if not
/** @par Example:
    @code
int size = msg.signal();
    @endcode
 */
int ZMsg::signal() [flags=CONSTANT] {
   if (check(xsink))
      return QoreValue();
   return zmsg_signal(**msg);
}

//! Returns the number of frames in the message
/** @par Example:
    @code
int size = msg.size();
    @endcode
 */
int ZMsg::size() [flags=CONSTANT] {
   if (check(xsink))
      return QoreValue();
   return zmsg_size(**msg);
}

//! Returns the byte size of all frames in the message
/** @par Example:
    @code
int size = msg.contentSize();
    @endcode
 */
int ZMsg::contentSize() [flags=CONSTANT] {
   if (check(xsink))
      return QoreValue();
   return zmsg_content_size(**msg);
}

//! Returns @ref Qore::True "True" if two msgs have identical size and data
/** @par Example:
    @code
bool b = msg.more();
    @endcode

    @param msg2 the message to compare

    @return @ref Qore::True "True" if two msgs have identical size and data
*/
bool ZMsg::eq(ZMsg[QoreZMsg] msg2) [flags=CONSTANT] {
   if (check(xsink))
      return QoreValue();

   ReferenceHolder<QoreZMsg> holder(msg2, xsink);

   return zmsg_eq(**msg, **msg2);
}

//! Sends a message to the zsys log sink (may be stdout, or system facility)
/** @par Example:
    @code
msg.print();
    @endcode
*/
nothing ZMsg::print() {
   if (check(xsink))
      return QoreValue();

   zmsg_print(**msg);
}

//! Saves the message contents to an open file
/** @par Example:
    @code
File f();
f.open(file_name, O_CREAT|O_WRONLY|O_TRUNC);
msg.save(f);
    @endcode

    @param file the file to save the data to; must be open for writing

    The message is saved as a series of frames, each with length and data.

    @throw ZMSG-SAVE-ERROR if there is any error saving the data, this exception is thrown

    @note The file is NOT guaranteed to be portable between operating systems, not
    versions of CZMQ. The file format is at present undocumented and liable
    to arbitrary change.
*/
nothing ZMsg::save(Qore::File[File] file) [dom=FILESYSTEM] {
   if (check(xsink))
      return QoreValue();

   ReferenceHolder<File> holder(file, xsink);

   if (!file->isOpen()) {
      xsink->raiseException("ZMSG-SAVE-ERROR", "File is not open");
      return QoreValue();
   }

   FILE* f = fdopen(dup(file->getFD()), "w");
   if (!f) {
      xsink->raiseErrnoException("ZMSG-SAVE-ERROR", errno, "error writing to File");
      return QoreValue();
   }
   ON_BLOCK_EXIT(fclose, f);
   int rc = zmsg_save(**msg, f);
   if (rc)
      zmq_error(xsink, "ZMSG-SAVE-ERROR", "error in zmsg_save()");
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketPush.qpp defines the ZSocketPush class */
/*
  QC_ZSocketPush.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketPush.h"

//! The ZSocketPush class implements a ZeroMQ \c PUSH socket
/** A socket of type \c PUSH is used by a pipeline node to send messages to downstream
    pipeline nodes. Messages are round-robined to all connected downstream nodes. The
    @ref ZSocket::recvMsg() "ZSocket::recv*()" methods are not implemented for this socket type.
    \n\n
    When a \c PUSH socket enters the mute state due to having reached the high water mark
    for all downstream nodes, or if there are no downstream nodes at all, then any
    @ref ZSocket::sendMsg "ZSocket::send*()" operations on the socket shall block until
    the mute state ends or at least one downstream node becomes available for sending;
    messages are not discarded.
    \n\n
    <b>Summary of \c PUSH characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketPull "PULL"
    |Direction|Unidirectional
    |Send/receive pattern|Send only
    |Incoming routing strategy|N/A
    |Outgoing routing strategy|Round-robin
    |Action in mute state|Block

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
 */
qclass ZSocketPush [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c PUSH zsocket
/** @par Example
    @code
ZSocketPush sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketPush::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPUSH, new QorePushZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected \c PUSH zsocket
/** @par Example
    @code
ZSocketPush sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketPush::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPUSH, new QorePushZSock(*ctx, nullptr, xsink));
}

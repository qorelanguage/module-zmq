/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketSub.qpp defines the ZSocketSub class */
/*
  QC_ZSocketSub.qpp

  Qore Programming Language

  Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as sublished by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_ZSocketSub.h"

//! The ZSocketSub class implements a ZeroMQ \c SUB socket
/** @par Overview
    A socket of type \c SUB is used by a subscriber to subscribe to data distributed by a publisher.
    Initially a \c SUB socket is not subscribed to any messages, use the @ref ZSocketSub::subscribe()
    method to specify which messages to subscribe to. The @ref ZSocket::send() method is not
    implemented for this socket type.
    \n\n
    <b>Summary of \c SUB characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketPub "PUB", @ref ZSocketXPub "XPUB"
    |Direction|Unidirectional
    |Send/receive pattern|Receive only
    |Incoming routing strategy|Fair-queued
    |Outgoing routing strategy|N/A

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
 */
qclass ZSocketSub [arg=QoreSubZSock* zsock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c SUB zsocket
/** @par Example
    @code{.py}
ZSocketSub sock(ctx, "tcp://127.0.0.1:8001", str);
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect
    @param subscribe the subscription to set; set immediately after the socket is connected

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketSub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint, string subscribe) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETSUB, new QoreSubZSock(*ctx, endpoint->c_str(), subscribe, xsink));
}

//! constructs an unconnected \c SUB zsocket
/** @par Example
    @code{.py}
ZSocketSub sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket

    @note Newly created ZSocketSub objects filter out all incoming messages, therefore you should call subscribe() to establish an initial message filter
 */
ZSocketSub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETSUB, new QoreSubZSock(*ctx, nullptr, nullptr, xsink));
}

//! Adds a subscription to the socket
/** @par Example:
    @code{.py}
zsock.subscribe(str);
    @endcode

    @param subs the socket subscription string to set; the string will be converted to UTF-8 encoding if necessary; the subscription string will be cleared if @ref nothing is passed

    This call adds a new message filter on the socket.  Newly created ZSocketSub objects filter out all incoming messages,
    therefore you should call thie method to establish an initial message filter.

    An empty string (or @ref nothing) means to subscribe to all incoming messages.  A non-empty string subscribes
    to all messages beginning with the specified prefix.  Multiple filters may be attached to a single ZSocketSub object,
    in which case a message will be accepted if it matches at least one filter.

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to UTF-8
    @throw ZSOCKET-SUBSCRIBE-ERROR if an error occurs setting the subscription option on the socket
    @throw ZSOCKET-THREAD-ERROR this exception is thrown if this method is called from a thread other than the thread where the object was created
    @throw ZSOCKET-CONTEXT-ERROR the context is no longer valid

    @see
    - unsubscribe()
    - @ref ZMQ_SUBSCRIBE
    - @ref ZMQ_UNSUBSCRIBE
 */
nothing ZSocketSub::subscribe(*string subs) {
    // enforce access from the correct thread
    if (zsock->check(xsink))
        return QoreValue();

    TempEncodingHelper subs_utf8;

    if (subs && subs_utf8.set(subs, QCS_UTF8, xsink))
        return QoreValue();

    zsock->subscribeIntern(xsink, *subs_utf8);
}

//! Removes a subscription from the socket
/** @par Example:
    @code{.py}
zsock.unsubscribe(str);
    @endcode

    @param subs the socket subscription string to remove; the string will be converted to UTF-8 encoding if necessary; the subscription string will be cleared if @ref nothing is passed

    This call removes an existing subscription from the socket.  The subscription string specified must match an
    existing filter previously established.  If the socket has several instances of the same filter attached,
    this call will remove only one instance, leaving the rest in place and functional.

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to UTF-8
    @throw ZSOCKET-UNSUBSCRIBE-ERROR if an error occurs setting the subscription option on the socket
    @throw ZSOCKET-THREAD-ERROR this exception is thrown if this method is called from a thread other than the thread where the object was created
    @throw ZSOCKET-CONTEXT-ERROR the context is no longer valid

    @see
    - subscribe()
    - @ref ZMQ_SUBSCRIBE
    - @ref ZMQ_UNSUBSCRIBE
 */
nothing ZSocketSub::unsubscribe(*string subs) {
    // enforce access from the correct thread
    if (zsock->check(xsink))
        return QoreValue();

    TempEncodingHelper subs_utf8;

    if (subs && subs_utf8.set(subs, QCS_UTF8, xsink))
        return QoreValue();

    while (true) {
        int rc = zmq_setsockopt(**zsock, ZMQ_UNSUBSCRIBE, subs ? subs_utf8->c_str() : nullptr, subs ? subs_utf8->size() : 0);
        if (rc) {
            if (errno == EINTR)
                continue;
            zmq_error(xsink, "ZSOCKET-UNSUBSCRIBE-ERROR", "error removing subscription \"%s\"", subs_utf8->c_str());
        }
        break;
    }
}

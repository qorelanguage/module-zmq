/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZContext.qpp defines the ZContext class */
/*
  QC_ZContext.qpp

  Qore Programming Language

  Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZContext.h"

/** @defgroup zcontext_options ZContext Options
    These constants plus @ref Qore::ZMQ::ZMQ_IPV6 "ZMQ_IPV6" define the possible options for the @ref Qore::ZMQ::ZContext::setOption() "ZContext::setOption()" and @ref Qore::ZMQ::ZContext::getOption() "ZContext::getOption()" methods
*/
///@{
//! Fix blocky behavior
/** When ZMQ_BLOCKY is set to false, all new sockets are given a linger timeout of zero.

    By default the context will block indefinitely in the destructor (which calls <tt>zmq_ctx_term()</tt>).

    The assumption behind this behavior is that abrupt termination will cause message loss. Most real applications use some form of handshaking to ensure applications receive termination messages, and then terminate the context with ZMQ_LINGER set to zero on all sockets. This setting is an easier way to get the same result; when ZMQ_BLOCKY is set to False, all new sockets are given a linger timeout of zero.

    You must still close all sockets before deleting the ZContext.
 */
const ZMQ_BLOCKY = ZMQ_BLOCKY;

//! Set number of I/O threads
/** The ZMQ_IO_THREADS argument specifies the size of the Ã˜MQ thread pool to handle I/O operations. If your application is using only the \c inproc transport for messaging you may set this to zero, otherwise set it to at least one.

    Default value: 1

    @note This option only applies before creating any sockets on the context.
 */
const ZMQ_IO_THREADS = ZMQ_IO_THREADS;

//! Set maximum message size
/** Sets the maximum allowed size of a message sent in the context.

    Default value: MAXINT
 */
const ZMQ_MAX_MSGSZ = ZMQ_MAX_MSGSZ;

//! Set maximum number of sockets
/** Sets the maximum number of sockets allowed on the context.

    Default value: 1024
 */
const ZMQ_MAX_SOCKETS = ZMQ_MAX_SOCKETS;
///@}

// FIXME add ZMQ_THREAD_SCHED_POLICY and ZMQ_THREAD_PRIORITY if they can be supported in a system-independent way

//! The ZContext class implements a ZeroMQ context
/** The context is terminated in the destructor
 */
qclass ZContext [arg=QoreZContext* ctx; ns=Qore::ZMQ; dom=NETWORK];

//! constructs a ZContext object
/** @par Example:
    @code{.py}
ZContext ctx();
    @endcode
 */
ZContext::constructor() {
   self->setPrivate(CID_ZCONTEXT, new QoreZContext);
}

//! Throws an exception; ZContext objects cannot be copied
/** @throw ZCONTEXT-COPY-ERROR this exception is thrown if any attempt is made to copy a ZContext object
 */
ZContext::copy() {
   xsink->raiseException("ZCONTEXT-COPY-ERROR", "objects of this class cannot be copied");
}

//! Sets the given option on the context
/** @par Example:
    @code{.py}
ctx.setOption(ZMQ_IPV6, 1);
    @endcode

    @param opt the option number; see @ref zcontext_options for possible values
    @param value the integer value to set

    @throw ZCONTEXT-SETOPTION-ERROR this exception is thrown if there is any error setting the option
 */
nothing ZContext::setOption(int opt, int value) {
   int rc = zmq_ctx_set(**ctx, opt, value);
   if (rc)
      zmq_error(xsink, "ZCONTEXT-SETOPTION-ERROR", "error in ZContext::setOption(%d, ...)", (int)opt);
}

//! Retrieves the value of the given option on the context
/** @par Example:
    @code{.py}
int val = ctx.getOption(ZMQ_IPV6);
    @endcode

    @param opt the option number; see @ref zcontext_options for possible values

    @return the integer value of the given option

    @throw ZCONTEXT-GETOPTION-ERROR this exception is thrown if there is any error setting the option
 */
int ZContext::getOption(int opt) [flags=RET_VALUE_ONLY] {
   int rc = zmq_ctx_get(**ctx, opt);
   if (rc < 0) {
      zmq_error(xsink, "ZCONTEXT-GETOPTION-ERROR", "error in ZContext::getOption(%d)", (int)opt);
      return QoreValue();
   }
   return rc;
}

//! Shuts the context down
/** @par Example:
    @code{.py}
ctx.shutdown();
    @endcode

    Context shutdown will cause any blocking operations currently in progress
    on sockets open within context to return immediately with an error code
    of \c ETERM which causes a Qore-language exception to be raised..

    With the exception of closing the socket, any further operations on sockets
    open within context shall fail with an error code of \c ETERM, causing Qore-
    language exceptions to be thrown.

    @throw ZCONTEXT-SHUTDOWN-ERROR this exception is thrown if there is any error in this method call
 */
nothing ZContext::shutdown() {
   int rc = zmq_ctx_shutdown(**ctx);
   if (rc < 0)
      zmq_error(xsink, "ZCONTEXT-SHUTDOWN-ERROR", "error in ZContext::shutdown()");
}

/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketPair.qpp defines the ZSocketPair class */
/*
  QC_ZSocketPair.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketPair.h"

//! The ZSocketPair class implements a ZeroMQ \c PAIR socket for the "exclusive pair" socket pattern
/** @par Overview
    A socket of type \c PAIR can only be connected to a single peer at any one time. No message
    routing or filtering is performed on messages sent over a \c PAIR socket.
    \n\n
    When a \c PAIR socket enters the mute state due to having reached the high water mark for
    the connected peer, or if no peer is connected, then any
    @ref ZSocket::send() "ZSocket::send*()" operations on the socket shall block until the
    peer becomes available for sending; messages are not discarded.
    \n\n
    <b>Summary of \c PAIR characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketPair "PAIR"
    |Direction|Bidirectional
    |Send/receive pattern|Unrestricted
    |Incoming routing strategy|N/A
    |Outgoing routing strategy|N/A
    |Action in mute state|Block

    @see <a href="https://rfc.zeromq.org/spec:31/EXPAIR/">ZMQ PAIR socket spec</a>

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
    - \c PAIR sockets are designed for inter-thread communication across \c inproc:// transports
      and do not implement functionality such as auto-reconnection.
 */
qclass ZSocketPair [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c PAIR zsocket
/** @par Example
    @code
ZSocketPair sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketPair::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPAIR, new QorePairZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected \c PAIR zsocket
/** @par Example
    @code
ZSocketPair sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketPair::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETPAIR, new QorePairZSock(*ctx, nullptr, xsink));
}

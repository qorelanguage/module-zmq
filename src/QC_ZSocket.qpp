/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocket.qpp defines the ZSocket class */
/*
  QC_ZSocket.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "zmq-module.h"

#include "QC_ZSocket.h"
#include "QC_ZMsg.h"
#include "QC_ZFrame.h"

#include <zmsg.h>
#include <zframe.h>

int QoreZSock::poll(short events, int timeout_ms, const char* meth, ExceptionSink *xsink) {
   zmq_pollitem_t p = { zsock_resolve(sock), 0, events, 0 };
   int rc;
   while (true) {
      rc = zmq_poll(&p, 1, timeout_ms);
      if (rc == -1 && errno == EINTR)
         continue;
      break;
   }
   if (rc > 0)
      return 0;
   if (!rc)
      xsink->raiseException("ZSOCKET-TIMEOUT", "timeout waiting %d ms in %s() for data%s on the socket", timeout_ms, meth, events & ZMQ_POLLOUT ? " to be sent" : "");
   else
      zmq_error(xsink, "ZSOCKET-TIMEOUT", "error in zmq_poll() in %s()", meth);
   return -1;
}

//! The ZSocket class provides the abstract base class for ZeroMQ socket classes
/** This class is subject to a mutual-exclusion lock to ensure that it can be
    safely used in a multi-threaded context.
 */
qclass ZSocket [arg=QoreZSock* zsock; ns=Qore::ZMQ; dom=NETWORK];

//! Private constructor; use a child class instead
/**
 */
abstract private:internal ZSocket::constructor() {
   // this method can never be called
   assert(false);
}

//! Throws an exception; copying ZSocket objects is not currently supported
/** @throw ZSOCKET-COPY-ERROR copying ZSocket objects is not currently supported
*/
ZSocket::copy() {
   xsink->raiseException("ZSOCKET-COPY-ERROR", "copying ZSocket objects is not currently supported");
}

//! Bind the ZSocket to a formatted @ref zmqendpoints "endpoint"
/** @par Examples:
    @code{.py}
# bind to first free port from C000 up
zsock.bind("tcp://127.0.0.1:*");
# bind to random port from C000 to FFFF
zsock.bind("tcp://127.0.0.1:!");
# bind to first free port from 60000 up
zsock.bind("tcp://127.0.0.1:*[60000-]");
# bind to random port from C000 to 60000
zsock.bind("tcp://127.0.0.1:![-60000]");
# bind to random port from 55000 to 55999
zsock.bind("tcp://127.0.0.1:![55000-55999]");
    @endcode

    For \c tcp:// endpoints, supports ephemeral ports, if you specify the port number as "*".
    By default zsock uses the IANA designated range from C000 (49152) to FFFF (65535).

    To override this range, follow the "*" with "[first-last]". Either or
    both first and last may be empty. To bind to a random port within the
    range, use "!" in place of "*".

    @param format the format string for the @ref zmqendpoints "endpoint"
    @param ... optional arguments for the format string

    @return the actual port number used for \c "tcp://" endpoints,
    0 for other transports. On failure, a \c ZSOCKET-BIND-ERROR exception is thrown.
    Note that when using ephemeral ports, a port may be reused by different services without
    clients being aware. Protocols that run on ephemeral ports should take
    this into account.

    @throw ZSOCKET-BIND-ERROR if an error occurs, this exception is thrown

    @note do not use the endpoint prefix \c "@" with this method
 */
int ZSocket::bind(string format, ...) {
   SimpleRefHolder<QoreStringNode> str(q_sprintf(args, 0, 0, xsink));
   if (*xsink)
      return QoreValue();

   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   int rc = zsock_bind(**zsock, "%s", str->c_str());
   if (rc < 0) {
      zmq_error(xsink, "ZSOCKET-BIND-ERROR", "error in ZSocket::bind(\"%s\")", str->c_str());
      return QoreValue();
   }
   return rc;
}

//! Returns the last bound @ref zmqendpoints "endpoint", if any or @ref nothing if not
/** @par Examples:
    @code{.py}
*string endpoint = zsock.endpoint();
    @endcode

    @return the last bound @ref zmqendpoints "endpoint", if any or @ref nothing if not
 */
*string ZSocket::endpoint() [flags=CONSTANT] {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   const char* str = zsock_endpoint(**zsock);
   return str ? QoreValue(new QoreStringNode(str)) : QoreValue();
}

//! Unbinds the socket from a formatted @ref zmqendpoints "endpoint"
/** @par Examples:
    @code{.py}
zsock.unbind(str);
    @endcode

    @param format the format string for the @ref zmqendpoints "endpoint"
    @param ... optional arguments for the format string

    Throws an exception if the @ref zmqendpoints "endpoint" was invalid or the function isn't supported on the current socket

    @throw ZSOCKET-UNBIND-ERROR thrown if the @ref zmqendpoints "endpoint" was invalid or the function isn't supported on the current socket
*/
nothing ZSocket::unbind(string format, ...) {
   SimpleRefHolder<QoreStringNode> str(q_sprintf(args, 0, 0, xsink));
   if (*xsink)
      return QoreValue();

   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   int rc = zsock_unbind(**zsock, "%s", str->c_str());
   if (rc < 0)
      zmq_error(xsink, "ZSOCKET-UNBIND-ERROR", "error in ZSocket::unbind(\"%s\")", str->c_str());
}

//! Connects the socket to a formatted @ref zmqendpoints "endpoint"
/** @par Examples:
    @code{.py}
zsock.unbind(str);
    @endcode

    @param format the format string for the @ref zmqendpoints "endpoint"
    @param ... optional arguments for the format string

    Throws an exception if an error occurs connecting to the @ref zmqendpoints "endpoint"

    @throw ZSOCKET-CONNECT-ERROR thrown if an error occurs connecting to the @ref zmqendpoints "endpoint"

    @note do not use the endpoint prefix \c ">" with this method
 */
nothing ZSocket::connect(string format, ...) {
   SimpleRefHolder<QoreStringNode> str(q_sprintf(args, 0, 0, xsink));
   if (*xsink)
      return QoreValue();

   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   int rc = zsock_connect(**zsock, "%s", str->c_str());
   if (rc < 0)
      zmq_error(xsink, "ZSOCKET-CONNECT-ERROR", "error in ZSocket::connect(\"%s\")", str->c_str());
}

//! Disconnects the socket from a formatted @ref zmqendpoints "endpoint"
/** @par Examples:
    @code{.py}
zsock.disconnect(str);
    @endcode

    @param format the format string for the @ref zmqendpoints "endpoint"
    @param ... optional arguments for the format string

    Throws an exception if the @ref zmqendpoints "endpoint" was invalid or the function isn't supported on the current socket

    @throw ZSOCKET-DISCONNECT-ERROR thrown if the @ref zmqendpoints "endpoint" was invalid or the function isn't supported on the current socket
 */
nothing ZSocket::disconnect(string format, ...) {
   SimpleRefHolder<QoreStringNode> str(q_sprintf(args, 0, 0, xsink));
   if (*xsink)
      return QoreValue();

   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   int rc = zsock_disconnect(**zsock, "%s", str->c_str());
   if (rc < 0)
      zmq_error(xsink, "ZSOCKET-DISCONNECT-ERROR", "error in ZSocket::disconnect(\"%s\")", str->c_str());
}

//! Attaches the socket to zero or more @ref zmqendpoints "endpoints"
/** @par Examples:
    @code{.py}
zsock.attach(endpoints_str, True);
    @endcode

    @param endpoints zero or more @ref zmqendpoints "endpoints", separated by commas and prefixed by \c '@' (to bind the socket) or \c '>' (to connect the socket)
    @param serverish determines if endpoints not prefixed with \c '@' or \c '>' are bound (\a serverish = @ref Qore::True "True") or connected (\a serverish = @ref Qore::False "False", the default)

    Throws an exception if there was a syntax error in the \a endpoints argument

    @throw ZSOCKET-ATTACH-ERROR thrown if there was a syntax error in the \a endpoints argument
*/
nothing ZSocket::attach(*string endpoints, bool serverish = False) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   int rc = zsock_attach(**zsock, endpoints ? endpoints->c_str() : nullptr, serverish);
   if (rc < 0)
      zmq_error(xsink, "ZSOCKET-ATTACH-ERROR", "error in ZSocket::attach(%s%s%s, %s)", endpoints ? "'" : "", endpoints ? endpoints->c_str() : "", endpoints ? "'" : "", serverish ? "True" : "False");
}

//! Returns the socket type as a string
/** @par Example:
    @code{.py}
string type = zsock.type();
    @endcode

    @return the socket type as a string
 */
string ZSocket::type() [flags=CONSTANT] {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   const char* str = zsock_type_str(**zsock);
   assert(str);
   return new QoreStringNode(str);
}

//! Sends the given message over the socket; the message is consumed by this call
/** @par Example:
    @code{.py}
zsock.send(msg);
    @endcode

    @param msg the message to send; the argument object will be deleted as it is consumed by this call; if the message is empty then no data is sent, but the object is destroyed in any case

    @throw ZSOCKET-SEND-ERROR thrown if an error occurs during the call
*/
nothing ZSocket::send(Qore::ZMQ::ZMsg[QoreZMsg] msg) {
   ReferenceHolder<QoreZMsg> holder(msg, xsink);
   {
      // ensure atomicity of the call
      QoreZSockLockHelper qzlh(*zsock);
      int rc = zmsg_send(msg->getPtr(), **zsock);
      if (rc < 0)
         zmq_error(xsink, "ZSOCKET-SEND-ERROR", "error in ZSocket::send(%s)", obj_msg->getClassName());
   }
   if (!msg->getPtr())
      const_cast<QoreObject*>(obj_msg)->doDelete(xsink);
}

//! Waits for data to read on the socket; if data does not arrive before the timeout expires, a \c ZSOCKET-TIMEOUT exception is thrown
/** @par Example:
    @code{.py}
zsock.waitRead(10s);
    @endcode

    @param timeout_ms the timeout in milliseconds

    @throw ZSOCKET-TIMEOUT this exception is thrown if data does not arrive before the timeout expires
*/
nothing ZSocket::waitRead(timeout timeout_ms) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   zsock->poll(ZMQ_POLLIN, timeout_ms, "ZSocket::waitRead", xsink);
}

//! Waits for data to be written on the socket; if data is not sent before the timeout expires, a \c ZSOCKET-TIMEOUT exception is thrown
/** @par Example:
    @code{.py}
zsock.waitWrite(10s);
    @endcode

    @param timeout_ms the timeout in milliseconds

    @throw ZSOCKET-TIMEOUT this exception is thrown if the data is not sent before the timeout expires
*/
nothing ZSocket::waitWrite(timeout timeout_ms) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   zsock->poll(ZMQ_POLLOUT, timeout_ms, "ZSocket::waitWrite", xsink);
}

//! Sends the given frame over the socket; the frame is consumed by this call unless @ref Qore::ZMQ::ZFRAME_REUSE is used in the \a flags argument
/** @par Example:
    @code{.py}
zsock.send(frame);
    @endcode

    @param frame the frame to send; if \a does not contain @ref Qore::ZMQ::ZFRAME_REUSE, the argument object will be deleted by this call; if the frame is empty then no data is sent
    @param flags a bitwise-or combination of zero or more of @ref zframe_flags; to send a frame in non-blocking mode, use the @ref Qore::ZMQ::ZFRAME_DONTWAIT flag

    @throw ZSOCKET-SEND-ERROR thrown if an error occurs during the call
    @throw ZSOCKET-SEND-WAIT-ERROR if the @ref Qore::ZMQ::ZFRAME_DONTWAIT flag is used and the message cannot be queued on the socket, this exception is thrown
*/
nothing ZSocket::send(Qore::ZMQ::ZFrame[QoreZFrame] frame, int flags = 0) {
   ReferenceHolder<QoreZFrame> holder(frame, xsink);
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   {
      int rc = zframe_send(frame->getPtr(), **zsock, flags);
      if (rc < 0) {
         if (flags & ZFRAME_DONTWAIT && errno == EAGAIN)
            zmq_error(xsink, "ZSOCKET-SEND-WAIT-ERROR", "error in ZSocket::send(%s)", obj_frame->getClassName());
         else
            zmq_error(xsink, "ZSOCKET-SEND-ERROR", "error in ZSocket::send(%s)", obj_frame->getClassName());
      }
   }
   if (!(flags & ZFRAME_REUSE) && !frame->getPtr())
      const_cast<QoreObject*>(obj_frame)->doDelete(xsink);
}

//! Receives a frame from the socket
/** @par Example:
    @code{.py}
ZFrame frm = zsock.recvFrame();
    @endcode

    @return the frame received from the socket

    @throw ZSOCKET-RECVFRAME-ERROR thrown if an error occurs during the call
*/
ZFrame ZSocket::recvFrame() {
   zframe_t* frm;
   {
      // ensure atomicity of the call
      QoreZSockLockHelper qzlh(*zsock);
      frm = zframe_recv(**zsock);
   }
   if (!frm) {
      zmq_error(xsink, "ZSOCKET-RECVFRAME-ERROR", "error in ZSocket::recvFrame()");
      return QoreValue();
   }
   return new QoreObject(QC_ZFRAME, getProgram(), new QoreZFrame(frm));
}

//! Receives a message from the socket
/** @par Example:
    @code{.py}
ZMsg frm = zsock.recvMsg();
    @endcode

    @return the messsage received from the socket

    @throw ZSOCKET-RECVMSG-ERROR thrown if an error occurs during the call
    @throw ZSOCKET-TIMEOUT thrown if a timeout error occurs
*/
ZMsg ZSocket::recvMsg() {
   zmsg_t* msg;
   {
      // ensure atomicity of the call
      QoreZSockLockHelper qzlh(*zsock);
      msg = zmsg_recv(**zsock);
   }
   if (!msg) {
      zmq_error(xsink, "ZSOCKET-RECVMSG-ERROR", "error in ZSocket::recvMsg()");
      return QoreValue();
   }
   return new QoreObject(QC_ZMSG, getProgram(), new QoreZMsg(msg));
}

//! Sets the send timeout in milliseconds
/** @par Example:
    @code{.py}
zsock.setSendTimeout(30s);
    @endcode

    @param timeout_ms set the send timeout in milliseconds; like all %Qore functions and methods taking timeout values, a @ref relative_dates "relative date/time value" can be used to make the units clear (i.e. \c 2m = two minutes, etc.)

    @throw ZSOCKET-SETSENDTIMEOUT-ERROR if an error occurs setting the timeout option

    @see
    - @ref ZSocket::setRecvTimeout()
    - @ref ZSocket::setTimeout()
 */
nothing ZSocket::setSendTimeout(timeout timeout_ms) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   int v = timeout_ms;
   while (true) {
      int rc = zmq_setsockopt(zsock_resolve(**zsock), ZMQ_SNDTIMEO, &v, sizeof v);
      if (rc) {
         if (errno == EINTR)
            continue;
         zmq_error(xsink, "ZSOCKET-SETSENDTIMEOUT-ERROR", "error in ZSocket::setSendTimeout()");
      }
   }
}

//! Sets the receive timeout in milliseconds
/** @par Example:
    @code{.py}
zsock.setRecvTimeout(30s);
    @endcode

    @param timeout_ms set the receive timeout in milliseconds; like all %Qore functions and methods taking timeout values, a @ref relative_dates "relative date/time value" can be used to make the units clear (i.e. \c 2m = two minutes, etc.)

    @throw ZSOCKET-SETRECVTIMEOUT-ERROR if an error occurs setting the timeout option

    @see
    - @ref ZSocket::setSendTimeout()
    - @ref ZSocket::setTimeout()
 */
nothing ZSocket::setRecvTimeout(timeout timeout_ms) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   int v = timeout_ms;
   while (true) {
      int rc = zmq_setsockopt(zsock_resolve(**zsock), ZMQ_RCVTIMEO, &v, sizeof v);
      if (rc) {
         if (errno == EINTR)
            continue;
         zmq_error(xsink, "ZSOCKET-SETRECVTIMEOUT-ERROR", "error in ZSocket::setRecvTimeout()");
      }
   }
}

//! Sets the send and receive timeout in milliseconds
/** @par Example:
    @code{.py}
zsock.setTimeout(30s);
    @endcode

    @param timeout_ms set the send and receive timeout in milliseconds; like all %Qore functions and methods taking timeout values, a @ref relative_dates "relative date/time value" can be used to make the units clear (i.e. \c 2m = two minutes, etc.)

    @throw ZSOCKET-SETTIMEOUT-ERROR if an error occurs setting the timeout option

    @see
    - @ref ZSocket::setRecvTimeout()
    - @ref ZSocket::setSendTimeout()
 */
nothing ZSocket::setTimeout(timeout timeout_ms) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   int v = timeout_ms;
   while (true) {
      int rc = zmq_setsockopt(zsock_resolve(**zsock), ZMQ_RCVTIMEO, &v, sizeof v);
      if (rc) {
         if (errno == EINTR)
            continue;
         zmq_error(xsink, "ZSOCKET-SETTIMEOUT-ERROR", "error setting receive timeout in ZSocket::setTimeout()");
         return QoreValue();
      }
   }
   v = timeout_ms;
   while (true) {
      int rc = zmq_setsockopt(zsock_resolve(**zsock), ZMQ_SNDTIMEO, &v, sizeof v);
      if (rc) {
         if (errno == EINTR)
            continue;
         zmq_error(xsink, "ZSOCKET-SETTIMEOUT-ERROR", "error setting send timeout in ZSocket::setTimeout()");
      }
   }
}

//! Sets the socket identity string
/** @par Example:
    @code{.py}
zsock.setIdentity(str);
    @endcode

    @param id the identity string to set on the socket; the string will be converted to UTF-8 encoding if necessary

    @throw ENCODING-CONVERSION-ERROR this exception could be thrown if an encoding error is encountered when converting the given string to UTF-8
    @throw ZSOCKET-SETIDENTITY-ERROR if an error occurs setting the identity option on the socket

    @note it is recommended to use an identity option with the following socket types:
    - @ref Qore::ZMQ::ZSocketReq "ZSocketReq": \c REQ
    - @ref Qore::ZMQ::ZSocketRep "ZSocketRep": \c REP
    - @ref Qore::ZMQ::ZSocketDealer "ZSocketDealer": \c DEALER
    - @ref Qore::ZMQ::ZSocketRouter "ZSocketRouter": \c ROUTER
 */
nothing ZSocket::setIdentity(string id) {
   TempEncodingHelper id_utf8(id, QCS_UTF8, xsink);
   if (!id_utf8)
      return QoreValue();

   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   // NOTE: cannot use zsock_setidentity() here as it will assert for all sockets except REQ, REP, DEALER, and ROUTER
   while (true) {
      int rc = zmq_setsockopt(zsock_resolve(**zsock), ZMQ_IDENTITY, id_utf8->c_str(), id_utf8->size());
      if (rc) {
         if (errno == EINTR)
            continue;
         zmq_error(xsink, "ZSOCKET-SETIDENTITY-ERROR", "error setting identity \"%s\"", id_utf8->c_str());
      }
      break;
   }
}

//! retrieves the socket identity string
/** @par Example:
    @code{.py}
*string id = zsock.getIdentity();
    @endcode

    @return the socket identity string or @ref nothing if no value is set
*/
*string ZSocket::getIdentity() [flags=CONSTANT] {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);

   char* str = zsock_identity(**zsock);
   if (!str)
      return QoreValue();

   size_t len = strlen(str);
   return new QoreStringNode(str, len, len + 1, QCS_UTF8);
}

//! Sends a string over the socket
/** @par Example:
    @code{.py}
zsock.send(str);
    @endcode

    @param str the string to send as a frame over the socket

    @throw ZSOCKET-SEND-ERROR an error occurred sending the data
    @throw ZSOCKET-TIMEOUT thrown if a timeout error occurs
 */
nothing ZSocket::send(string str) {
   int rc = zstr_send(**zsock, str->c_str());
   if (rc)
      zmq_error(xsink, "ZSOCKET-SEND-ERROR", "error sending string");
}

//! Sends a binary object over the socket
/** @par Example:
    @code{.py}
zsock.send(bin);
    @endcode

    @param bin the binary object to send

    @throw ZSOCKET-SEND-ERROR an error occurred sending the data
    @throw ZSOCKET-TIMEOUT thrown if a timeout error occurs
 */
nothing ZSocket::send(binary bin) {
   int rc = zsock_send(**zsock, "b", bin->getPtr(), (size_t)bin->size());
   if (rc)
      zmq_error(xsink, "ZSOCKET-SEND-ERROR", "error sending binary object");
}

//! Send a 'picture' message to the socket
/** @par Example:
    @code{.py}
zsock.send("i", i);
    @endcode

    @param picture a string that defines the type of each frame. This makes it easy to send a complex multiframe message in one call. The picture can contain any of these characters, each corresponding to one or two arguments:
    - \c i = \c int (signed)
    - \c 1 = \c uint8_t (i.e. an 8 bit / single byte value)
    - \c 2 = \c uint16_t (i.e. a 16 bit / 2-byte unsigned integer value)
    - \c 4 = \c uint32_t (i.e. a 32 bit / 4-byte unsigned integer value)
    - \c 8 = \c uint64_t (i.e. a 64 bit / 8-byte unsigned integer value)
    - \c s = \c string
    - \c b = \c binary
    - \c c = \c zchunk_t*
    - \c f = @ref Qore::ZMQ::ZFrame "ZFrame"
    - \c h = \c zhashx_t*
    - \c U = \c zuuid_t*
    - \c m = @ref Qore::ZMQ::ZMsg "ZMsg" (sends all frames in the zmsg)
    - \c z = sends zero-sized frame (0 arguments)
    .
    Note that s, b, c, and f are encoded the same way and the choice is
    offered as a convenience to the sender, which may or may not already
    have data in a zchunk or zframe. Does
    @param ... arguments corresponding to \a picture; if there are not enough arguments an exception is thrown

    @throw ZSOCKET-SENDPICTURE-ARG-ERROR there was an error processing the arguments for the send call
    @throw ZSOCKET-SENDPICTURE-ERROR an error occurred sending the data
    @throw ZSOCKET-TIMEOUT thrown if a timeout error occurs
*/
nothing ZSocket::sendPicture(string picture, ...) {
   // ensure atomicity of the call
   QoreZSockLockHelper qzlh(*zsock);
   int rc = zsock_vsend(**zsock, picture->c_str(), nullptr);//zargs);
   if (rc < 0)
      zmq_error(xsink, "ZSOCKET-SENDPICTURE-ERROR", "error in ZSocket::send()");
}

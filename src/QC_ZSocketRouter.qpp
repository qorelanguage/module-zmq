/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketRouter.qpp defines the ZSocketRouter class */
/*
    QC_ZSocketRouter.qpp

    Qore Programming Language

    Copyright (C) 2017 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "QC_ZSocketRouter.h"

//! The ZSocketRouter class implements a ZeroMQ \c ROUTER socket
/** @par Overview
    A socket of type \c ROUTER is an advanced socket type used for extending request/reply sockets.
    When receiving messages a \c ROUTER socket shall prepend a message part containing the identity
    of the originating peer to the message before passing it to the application. Messages received
    are fair-queued from among all connected peers. When sending messages a \c ROUTER socket shall
    remove the first part of the message and use it to determine the identity of the peer the message
    shall be routed to. If the peer does not exist anymore the message shall be silently discarded by
    default, unless @ref ZSocketRouter::setMandatory() is set to @ref True.
    \n\n
    When a \c ROUTER socket enters the mute state due to having reached the high water mark for all
    peers, then any messages sent to the socket shall be dropped until the mute state ends. Likewise,
    any messages routed to a peer for which the individual high water mark has been reached shall
    also be dropped, unless  @ref ZSocketRouter::setMandatory() is set to @ref True.
    \n\n
    When a @ref ZSocketReq "REQ" socket is connected to a \c ROUTER socket, in addition to the
    identity of the originating peer each message received shall contain an empty delimiter message
    part. Hence, the entire structure of each received message as seen by the application becomes:
    - one or more identity parts
    - delimiter part
    - one or more body parts
    .
    When sending replies to a @ref ZSocketReq "REQ" socket, the application must include the delimiter part.
    \n\n
    <b>Summary of \c ROUTER characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketDealer "DEALER", @ref ZSocketReq "REQ", @ref ZSocketRouter "ROUTER"
    |Direction|Bidirectional
    |Send/receive pattern|Unrestricted
    |Outgoing routing strategy|See text
    |Incoming routing strategy|Fair-queued
    |Action in mute state|Drop (see text)

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
    - It is recommended to use an identity with \c ROUTER sockets
 */
qclass ZSocketRouter [arg=QoreZSock* zsock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c ROUTER zsocket with an explicit identity and endpoint
/** @par Example
    @code
ZSocketRouter sock(ctx, "my-identity", "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param identity the identity value for the socket; a missing or empty value here results in the default identity being assigned
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is bind

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-BIND-ERROR this exception is thrown if there is any error connecting the socket

    @note It is recommended to use an identity with \c ROUTER sockets
*/
ZSocketRouter::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, *string identity, string endpoint) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    SimpleRefHolder<QoreRouterZSock> router(new QoreRouterZSock(*ctx, identity, endpoint->c_str(), xsink));
    if (!*xsink)
        self->setPrivate(CID_ZSOCKETROUTER, router.release());
}

//! constructs an unconnected \c ROUTER zsocket with a default system-assigned identity
/** @par Example
    @code
# create an unconnected ROUTER socket
ZSocketRouter router(zctx);
# set the router's identity value explicitly before binding
router.setIdentity(RouterIdentity);
port = router.bind("tcp://127.0.0.1:*");
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket

    @note It is recommended to use an identity with \c ROUTER sockets
 */
ZSocketRouter::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETROUTER, new QoreRouterZSock(*ctx, nullptr, nullptr, xsink));
}

//! sets the \c ZMQ_ROUTER_MANDATORY option on the socket
/** @par Example
    @code{.py}
router.setMandatory(True);
    @endcode

    @param mandatory the mandatory option for the socket

    @throw ZSOCKET-SETMANDATORY-ERROR this exception is thrown if there is any error setting the socket option

    @see @ref ZMQ_ROUTER_MANDATORY
*/
ZSocketRouter::setMandatory(softbool mandatory) {
    int v = mandatory;
    if (zsock->setSocketOption(ZMQ_ROUTER_MANDATORY, &v, sizeof v))
        zmq_error(xsink, "ZSOCKET-SETMANDATORY-ERROR", "error setting mandatory %d in ZSocket::setMandatory()", mandatory ? 1 : 0);
}
/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketXSub.qpp defines the ZSocketXSub class */
/*
  QC_ZSocketXSub.qpp

  Qore Programming Language

  Copyright (C) 2017 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketXSub.h"

//! The ZSocketXSub class implements a ZeroMQ \c XSUB socket
/** @par Overview
    A socket of type \c XSUB is used by a subscriber to subscribe to data distributed by a publisher.
    Initially a \c XSUB socket is not subscribed to any messages.
    Subscribe by sending subscription messages to the socket.
    The subscription message is a single byte; 1 (for subscriptions) or 0 (for unsubscriptions) followed by the subscription body.
    Messages without a sub/unsub prefix may also be sent, but have no effect on subscription status.
    \n\n
    <b>Summary of \c XSUB characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketPub "PUB", @ref ZSocketXPub "XPUB"
    |Direction|Unidirectional
    |Send/receive pattern|Receive messages, send subscriptions
    |Incoming routing strategy|Fair-queued
    |Outgoing routing strategy|N/A
    |Action in mute state|Drop

    @note
    - The @ref ZSocket::send() method is not implemented for this socket type.
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
 */
qclass ZSocketXSub [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c XSUB zsocket
/** @par Example
    @code
ZSocketXSub sock(ctx, "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is connect

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-CONNECT-ERROR this exception is thrown if there is any error connecting the socket
 */
ZSocketXSub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, string endpoint) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETXSUB, new QoreXSubZSock(*ctx, endpoint->c_str(), xsink));
}

//! constructs an unconnected \c XSUB zsocket
/** @par Example
    @code
ZSocketXSub sock(ctx);
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
 */
ZSocketXSub::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
   ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
   self->setPrivate(CID_ZSOCKETXSUB, new QoreXSubZSock(*ctx, nullptr, xsink));
}

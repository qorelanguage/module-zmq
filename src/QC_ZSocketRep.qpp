/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZSocketRep.qpp defines the ZSocketRep class */
/*
    QC_ZSocketRep.qpp

    Qore Programming Language

    Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

//#include "qore-zmq-module.h"

#include "QC_ZSocketRep.h"

//! The ZSocketRep class implements a ZeroMQ \c REP socket
/** A socket of type \c REP is used by a service to receive requests from and send replies to
    a client. This socket type allows only an alternating sequence of
    @ref ZSocket::recvMsg() "ZSocket::recv*()" and subsequent
    @ref ZSocket::sendMsg() "ZSocket::send*()" calls. Each request received is fair-queued
    from among all clients, and each reply sent is routed to the client that issued the last
    request. If the original requester does not exist anymore, the reply is silently discarded.
    \n\n
    <b>Summary of \c REP characteristics</b>
    |!Property|!Value
    |Compatible peer sockets|@ref ZSocketReq "REQ", @ref ZSocketDealer "DEALER"
    |Direction|Bidirectional
    |Send/receive pattern|Receive, Send, Receive, Send, â€¦
    |Incoming routing strategy|Fair-queued
    |Outgoing routing strategy|Last peer

    @note
    - This class is not designed to be accessed from multiple threads; it was created without
      locking for fast and efficient use when used from a single thread.  For methods that would be
      unsafe to use in another thread, any use of such methods in threads other than the thread where the constructor was called will cause a \c ZSOCKET-THREAD-ERROR to be thrown.
    - It is recommended to use an identity with \c REP sockets
 */
qclass ZSocketRep [arg=QoreZSock* sock; ns=Qore::ZMQ; vparent=ZSocket; dom=NETWORK];

//! constructs a \c REP zsocket with an explicit identity and endpoint
/** @par Example
    @code{.py}
ZSocketRep sock(ctx, "my-identity", "tcp://127.0.0.1:8001");
    @endcode

    @param ctx the context for the socket
    @param identity the identity value for the socket; a missing or empty value here results in the default identity being assigned
    @param endpoint the @ref zmqendpoints "endpoint" for the socket; the default action is bind

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket
    @throw ZSOCKET-BIND-ERROR this exception is thrown if there is any error connecting the socket

    @note It is recommended to use an identity with \c REP sockets
 */
ZSocketRep::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx, *string identity, string endpoint) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETREP, new QoreRepZSock(*ctx, identity, endpoint->c_str(), xsink));
}

//! constructs an unconnected \c REP zsocket with a default system-assigned identity
/** @par Example
    @code{.py}
# create an unconnected REP socket
ZSocketRep rep(zctx);
# set the rep's identity value explicitly before binding
rep.setIdentity(RepIdentity);
port = rep.bind("tcp://127.0.0.1:*");
    @endcode

    @param ctx the context for the socket

    @throw ZSOCKET-CONSTRUCTOR-ERROR this exception is thrown if there is any error creating the socket

    @note It is recommended to use an identity with \c REP sockets
 */
ZSocketRep::constructor(Qore::ZMQ::ZContext[QoreZContext] ctx) {
    ReferenceHolder<QoreZContext> ctx_holder(ctx, xsink);
    self->setPrivate(CID_ZSOCKETREP, new QoreRepZSock(*ctx, nullptr, nullptr, xsink));
}

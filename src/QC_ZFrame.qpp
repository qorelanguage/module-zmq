/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ZFrame.qpp defines the ZFrame class */
/*
  QC_ZFrame.qpp

  Qore Programming Language

  Copyright (C) 2017 - 2018 Qore Technologies, s.r.o.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as sublished by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "zmq-module.h"

#include "QC_ZFrame.h"
#include "QC_ZMsg.h"

#include <zframe.h>
#include <zmsg.h>

/** @defgroup zframe_flags ZFrame Send Flags
    These values can be combined with bitwise-or when sending frames on a socket
*/
//@{
//! sets the "more" bit on the frame; i.e. that the frame is part of a multipart message
const ZFRAME_MORE = ZFRAME_MORE;

//! sets the "reuse" bit on the frame which prohibits the frame from being consumed by the call
const ZFRAME_REUSE = ZFRAME_REUSE;

//! sets the "don't wait" bit on the frame; specifies that send operations should be performed in non-blocking mode
const ZFRAME_DONTWAIT = ZFRAME_DONTWAIT;
//@}

//! The ZFrame class implements a ZeroMQ frame
/** This class does not support modifications after the constructor in order to remain lock-free
 */
qclass ZFrame [arg=QoreZFrame* frame; ns=Qore::ZMQ];

//! constructs an empty ZFrame
/** @par Example
    @code{.py}
ZFrame frame();
    @endcode
 */
ZFrame::constructor() {
   self->setPrivate(CID_ZFRAME, new QoreZFrame);
}

//! constructs a ZFrame from the string supplied
/** @par Example
    @code{.py}
ZFrame frame(str);
    @endcode

    The string data is copied to the frame's memory.
 */
ZFrame::constructor(string str) {
   self->setPrivate(CID_ZFRAME, new QoreZFrame(str->c_str(), str->size()));
}

//! constructs a ZFrame from the binary data supplied
/** @par Example
    @code{.py}
ZFrame frame(bin);
    @endcode

    The binary data is copied to the frame's memory.
 */
ZFrame::constructor(binary b) {
   self->setPrivate(CID_ZFRAME, new QoreZFrame(b->getPtr(), b->size()));
}

//! copies a ZFrame object
/** @par Example
    @code{.py}
ZFrame frame_new = frame.copy();
    @endcode
 */
ZFrame::copy() {
   self->setPrivate(CID_ZFRAME, new QoreZFrame(*frame));
}

//! Returns the byte size of the frame's data
/** @par Example
    @code{.py}
int size = frame.size();
    @endcode
 */
int ZFrame::size() [flags=CONSTANT] {
   return zframe_size(**frame);
}

//! Decodes a serialized message frame created by @ref Qore::ZMQ::ZMsg::encode() "ZMsg::encode()" and returns a new message object
/** @par Example:
    @code{.py}
ZMsg msg = frame.decode();
    @endcode

    @throw ZFRAME-DECODE-ERROR this exception is thrown if an error occurs decoding the frame

    @see Qore::ZMQ::ZMsg::encode() "ZMsg::encode()"
*/
ZMsg ZFrame::decode() [flags=CONSTANT] {
   zmsg_t* msg;
#ifdef HAVE_ZMSG_ENCODE_TO_ZFRAME
   msg = zmsg_decode(**frame);
#elif defined(HAVE_ZMSG_ENCODE_TO_BUFFER)
   msg = zmsg_decode(zframe_data(**frame), zframe_size(**frame));
#endif
   if (!msg) {
      zmq_error(xsink, "ZFRAME-DECODE-ERROR", "error in ZFrame::decode()");
      return QoreValue();
   }

   return new QoreObject(QC_ZMSG, getProgram(), new QoreZMsg(msg));
}

//! Returns meta data property for the frame
/** @par Example
    @code{.py}
*string str = frame.meta("Socket-Type");
    @endcode

    @param property a meta-data property for the first frame in the message; the string is converted to UTF-8 encoding if necessary; the following properties are available:
    - \c "Socket-Type":
    - \c "Identity":
    - \c "Resource":
    - \c "Peer-Address" if supported by the undelying transport; this property will return the IP address of the remote endpoint as returned by \c getnameinfo(2).

    @return a string in UTF-8 encoding giving the property value or @ref nothing if no such property is set for the frame

    @throw MISSING-FEATURE-ERROR thrown if the underlying czmq library is missing the \c zframe_meta() function; check @ref Qore::ZMQ::HAVE_ZFRAME_META "HAVE_ZFRAME_META" before calling this method

    @note
    - the input string is converted to UTF-8 encoding if necessary
    - Other properties may be defined based on the underlying security mechanism
    - only available if the underlying library supports it; check @ref Qore::ZMQ::HAVE_ZFRAME_META "HAVE_ZFRAME_META" before calling this method
 */
*string ZFrame::meta(string property) [flags=CONSTANT] {
#ifdef HAVE_ZFRAME_META
   TempEncodingHelper prop(property, QCS_UTF8, xsink);
   if (*xsink)
      return QoreValue();

   // note that the zcmq documentation is incorrect; a non-null return value must not
   // be free()d; it is implemented with zmq_msg_gets() which returns a string that
   // belongs to the zmq_msg_t object
   const char* val = zframe_meta(**frame, prop->c_str());
   return val ? QoreValue(new QoreStringNode(val, QCS_UTF8)) : QoreValue();
#else
   xsink->raiseException("MISSING-FEATURE-ERROR", "the underlying czmq library is missing a function required to implement this method; check HAVE_ZFRAME_META before calling");
#endif
}

//! Returns frame data encoded as printable hex string, useful for ØMQ UUIDs
/** @par Example
    @code{.py}
string str = frame.strhex();
    @endcode

    @return frame data encoded as printable hex string, useful for ØMQ UUIDs
 */
string ZFrame::strhex() [flags=CONSTANT] {
   char* val = zframe_strhex(**frame);
   assert(val);
   size_t len = strlen(val);
   return new QoreStringNode(val, len, len + 1, QCS_UTF8);
}

//! Returns the frame's contents as a binary object
/** @par Example
    @code{.py}
binary b = frame.bin();
    @endcode

    @return the frame's contents as a binary object
 */
binary ZFrame::bin() [flags=CONSTANT] {
   size_t size = zframe_size(**frame);
   if (!size)
      return new BinaryNode;
   return new BinaryNode(zframe_strdup(**frame), size);
}

//! Returns the frame's MORE indicator
/** @par Example
    @code{.py}
bool b = frame.more();
    @endcode

    @return the frame's MORE indicator
 */
bool ZFrame::more() [flags=CONSTANT] {
   return (bool)zframe_more(**frame);
}

//! Returns @ref Qore::True "True" if two frames have identical size and data
/** @par Example
    @code{.py}
bool b = frame.eq(frm);
    @endcode

    @param frm the frame to compare

    @return @ref Qore::True "True" if the two frames have identical size and data
*/
bool ZFrame::eq(ZFrame[QoreZFrame] frm) [flags=CONSTANT] {
   ReferenceHolder<QoreZFrame> holder(frm, xsink);

   return (bool)zframe_eq(**frame, **frm);
}

//! Returns @ref Qore::True "True" if the frame body is equal to the string excluding the terminating null
/** @par Example
    @code{.py}
bool b = frame.streq(str);
    @endcode

    @param str the string to compare the frame's body with

    @return @ref Qore::True "True" if the frame body is equal to the string excluding the terminating null
*/
bool ZFrame::streq(string str) [flags=CONSTANT] {
   return (bool)zframe_streq(**frame, str->c_str());
}

//! Reads a signed 16-bit integer from the given offset in the frame
/** @par Example:
    @code{.py}
int i = frame.readi2(0);
    @endcode

    @param offset the byte offset in the frame

    @return a signed 16-bit integer at the given position in the frame

    @throw ZFRAME-READ-ERROR this exception is thrown when an invalid offset argument is used
*/
int ZFrame::readi2(int offset) {
    size_t size = zframe_size(**frame);
    if (offset < 0 || (offset > (size - 2))) {
        xsink->raiseException("ZFRAME-READ-ERROR", "cannot read 2 bytes from byte offset" QLLD "; frame size: " QLLD, offset, size);
        return QoreValue();
    }

    const char* p = (const char*)zframe_data(**frame);
    return *((int16_t*)(p + offset));
}

//! Reads a signed 32-bit integer from the given offset in the frame
/** @par Example:
    @code{.py}
int i = frame.readi4(0);
    @endcode

    @param offset the byte offset in the frame

    @return a signed 32-bit integer at the given position in the frame

    @throw ZFRAME-READ-ERROR this exception is thrown when an invalid offset argument is used
*/
int ZFrame::readi4(int offset) {
    size_t size = zframe_size(**frame);
    if (offset < 0 || (offset > (size - 4))) {
        xsink->raiseException("ZMSG-READ-ERROR", "cannot read 4 bytes from byte offset" QLLD "; frame size: " QLLD, offset, size);
        return QoreValue();
    }

    const char* p = (const char*)zframe_data(**frame);
    return *((int32_t*)(p + offset));
}

//! Sends a message to the zsys log sink (may be stdout, or system facility)
/** @par Example
    @code{.py}
frame.print("my-frame");
    @endcode

    @param prefix an optional string to log before the frame
*/
nothing ZFrame::print(*string prefix) {
   zframe_print(**frame, prefix ? prefix->c_str() : nullptr);
}

#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires QUnit
%requires zmq

%exec-class ZmqTest

class ZmqTest inherits QUnit::Test {

    constructor() : QUnit::Test("ZmqTest", "1.0") {
        addTestCase("zsocket", \zSocketTest());
        set_return_value(main());
    }

    zSocketTest() {
        ZSocket sock = new ZSocketSub("@tcp://127.0.0.1:!", "xxx");
        assertEq("SUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketSub("@tcp://127.0.0.1:xxx", "xxx"); });

        sock = new ZSocketPub("@tcp://127.0.0.1:!");
        assertEq("PUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPub("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketXSub("@tcp://127.0.0.1:!");
        assertEq("XSUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXSub("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketXPub("@tcp://127.0.0.1:!");
        assertEq("XPUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXPub("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketStream("@tcp://127.0.0.1:!");
        assertEq("STREAM", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketStream("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketDealer("@tcp://127.0.0.1:!");
        assertEq("DEALER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketDealer("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketRouter("@tcp://127.0.0.1:!");
        assertEq("ROUTER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRouter("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketReq("@tcp://127.0.0.1:!");
        assertEq("REQ", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketReq("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketRep("@tcp://127.0.0.1:!");
        assertEq("REP", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRep("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketPush("@tcp://127.0.0.1:!");
        assertEq("PUSH", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPush("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketPull("@tcp://127.0.0.1:!");
        assertEq("PULL", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPull("@tcp://127.0.0.1:xxx"); });

        sock = new ZSocketPair("@tcp://127.0.0.1:!");
        assertEq("PAIR", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPair("@tcp://127.0.0.1:xxx"); });
    }
}

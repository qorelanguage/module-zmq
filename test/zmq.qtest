#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires QUnit
%requires Util
%requires zmq

%exec-class ZmqTest

class ZmqTest inherits QUnit::Test {
    public {
        const HelloWorld = "Hello, World!";
    }

    constructor() : QUnit::Test("ZmqTest", "1.0") {
        addTestCase("zsocket smoke", \zSocketSmokeTest());
        addTestCase("zsocket push/pull", \zSocketPushPullTest());
        addTestCase("zmsg", \zMsgTest());
        set_return_value(main());
    }

    zSocketSmokeTest() {
        ZSocket sock = new ZSocketSub("@tcp://127.0.0.1:!", "xxx");
        assertEq("SUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketSub("@tcp://127.0.0.1:xxx", "xxx"); });

        sock = new ZSocketPub("@tcp://127.0.0.1:!");
        assertEq("PUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPub("");
        assertEq("PUB", sock.type());
        sock = new ZSocketPub();
        assertEq("PUB", sock.type());

        sock = new ZSocketXSub("@tcp://127.0.0.1:!");
        assertEq("XSUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXSub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXSub("");
        assertEq("XSUB", sock.type());
        sock = new ZSocketXSub();
        assertEq("XSUB", sock.type());

        sock = new ZSocketXPub("@tcp://127.0.0.1:!");
        assertEq("XPUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXPub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXPub("");
        assertEq("XPUB", sock.type());
        sock = new ZSocketXPub();
        assertEq("XPUB", sock.type());

        sock = new ZSocketStream("@tcp://127.0.0.1:!");
        assertEq("STREAM", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketStream("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketStream("");
        assertEq("STREAM", sock.type());
        sock = new ZSocketStream();
        assertEq("STREAM", sock.type());

        sock = new ZSocketDealer("@tcp://127.0.0.1:!");
        assertEq("DEALER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketDealer("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketDealer("");
        assertEq("DEALER", sock.type());
        sock = new ZSocketDealer();
        assertEq("DEALER", sock.type());

        sock = new ZSocketRouter("@tcp://127.0.0.1:!");
        assertEq("ROUTER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRouter("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRouter("");
        assertEq("ROUTER", sock.type());
        sock = new ZSocketRouter();
        assertEq("ROUTER", sock.type());

        sock = new ZSocketReq("@tcp://127.0.0.1:!");
        assertEq("REQ", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketReq("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketReq("");
        assertEq("REQ", sock.type());
        sock = new ZSocketReq();
        assertEq("REQ", sock.type());

        sock = new ZSocketRep("@tcp://127.0.0.1:!");
        assertEq("REP", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRep("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRep("");
        assertEq("REP", sock.type());
        sock = new ZSocketRep();
        assertEq("REP", sock.type());

        sock = new ZSocketPush("@tcp://127.0.0.1:!");
        assertEq("PUSH", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPush("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPush("");
        assertEq("PUSH", sock.type());
        sock = new ZSocketPush();
        assertEq("PUSH", sock.type());

        sock = new ZSocketPull("@tcp://127.0.0.1:!");
        assertEq("PULL", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPull("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPull("");
        assertEq("PULL", sock.type());
        sock = new ZSocketPull();
        assertEq("PULL", sock.type());

        sock = new ZSocketPair("@tcp://127.0.0.1:!");
        assertEq("PAIR", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPair("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPair("");
        assertEq("PAIR", sock.type());
        sock = new ZSocketPair();
        assertEq("PAIR", sock.type());
    }

    zSocketPushPullTest() {
        ZSocketPush writer("@tcp://127.0.0.1:!");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:!");
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());

        ZSocketPull reader(">" + writer.endpoint());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());
        #map printf("%s = %y\n", $1, msg.meta($1)), ("Socket-Type", "Identity", "Resource", "Peer-Address",);
        printf("%N\n", msg);
    }

    zMsgTest() {
        ZMsg msg("testing");
        File f();
        assertThrows("ZMSG-SAVE-ERROR", \msg.save(), f);
        string fn = tmp_location() + DirSep + get_random_string(30);
        on_exit unlink(fn);
        f.open2(fn, O_CREAT|O_WRONLY|O_TRUNC);
        assertEq(NOTHING, msg.save(f));
        assertEq(True, is_readable(fn));
        assertEq(True, hstat(fn).size > 0);
    }
}

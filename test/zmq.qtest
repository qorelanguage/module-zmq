#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires QUnit
%requires Util
%requires zmq

%exec-class ZmqTest

class ZmqTest inherits QUnit::Test {
    public {
        const HelloWorld = "Hello, World!";
        const Testing = "testing, 1, 2, 3";
        const Subscription = "TEST";
    }

    constructor() : QUnit::Test("ZmqTest", "1.0") {
        addTestCase("zsocket smoke", \zSocketSmokeTest());
        addTestCase("zsocket push/pull", \zSocketPushPullTest());
        addTestCase("zsocket req/rep", \zSocketReqRepTest());
        addTestCase("zsocket pub/sub", \zSocketPubSubTest());
        addTestCase("zmsg", \zMsgTest());
        set_return_value(main());
    }

    zSocketSmokeTest() {
        ZSocket sock = new ZSocketSub("@tcp://127.0.0.1:!", "xxx");
        assertEq("SUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketSub("@tcp://127.0.0.1:xxx", "xxx"); });

        sock = new ZSocketPub("@tcp://127.0.0.1:!");
        assertEq("PUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPub("");
        assertEq("PUB", sock.type());
        sock = new ZSocketPub();
        assertEq("PUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketXSub("@tcp://127.0.0.1:!");
        assertEq("XSUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXSub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXSub("");
        assertEq("XSUB", sock.type());
        sock = new ZSocketXSub();
        assertEq("XSUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketXPub("@tcp://127.0.0.1:!");
        assertEq("XPUB", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketXPub("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXPub("");
        assertEq("XPUB", sock.type());
        sock = new ZSocketXPub();
        assertEq("XPUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketStream("@tcp://127.0.0.1:!");
        assertEq("STREAM", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketStream("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketStream("");
        assertEq("STREAM", sock.type());
        sock = new ZSocketStream();
        assertEq("STREAM", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketDealer("@tcp://127.0.0.1:!");
        assertEq("DEALER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketDealer("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketDealer("");
        assertEq("DEALER", sock.type());
        sock = new ZSocketDealer();
        assertEq("DEALER", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketRouter("@tcp://127.0.0.1:!");
        assertEq("ROUTER", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRouter("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRouter("");
        assertEq("ROUTER", sock.type());
        sock = new ZSocketRouter();
        assertEq("ROUTER", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketReq("@tcp://127.0.0.1:!");
        assertEq("REQ", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketReq("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketReq("");
        assertEq("REQ", sock.type());
        sock = new ZSocketReq();
        assertEq("REQ", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketRep("@tcp://127.0.0.1:!");
        assertEq("REP", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketRep("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRep("");
        assertEq("REP", sock.type());
        sock = new ZSocketRep();
        assertEq("REP", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPush("@tcp://127.0.0.1:!");
        assertEq("PUSH", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPush("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPush("");
        assertEq("PUSH", sock.type());
        sock = new ZSocketPush();
        assertEq("PUSH", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPull("@tcp://127.0.0.1:!");
        assertEq("PULL", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPull("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPull("");
        assertEq("PULL", sock.type());
        sock = new ZSocketPull();
        assertEq("PULL", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPair("@tcp://127.0.0.1:!");
        assertEq("PAIR", sock.type());
        assertThrows("ZSOCKET-CONSTRUCTOR-ERROR", sub () { new ZSocketPair("@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPair("");
        assertEq("PAIR", sock.type());
        sock = new ZSocketPair();
        assertEq("PAIR", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());
    }

    zSocketPushPullTest() {
        ZSocketPush writer("@tcp://127.0.0.1:!");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:!");
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());

        ZSocketPull reader(">" + writer.endpoint());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq("PUSH", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # check that calling ZMsg::popMsg() when there is no submessage deletes all other content
        writer.send(HelloWorld);
        msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq(NOTHING, msg.popMsg());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq(NOTHING, msg.popStr());

        writer.send(HelloWorld);
        msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        ZFrame frame = msg.popFrame();
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq("PUSH", frame.meta("Socket-Type"));
        assertEq(NOTHING, frame.meta("Identity"));
        assertEq(NOTHING, frame.meta("Resource"));
        assertEq("127.0.0.1", frame.meta("Peer-Address"));
        assertEq(NOTHING, frame.meta("User-Id"));
    }

    zSocketReqRepTest() {
        ZSocketRep reader("@tcp://127.0.0.1:!");
        softint port = (reader.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, reader.unbind("tcp://127.0.0.1:" + port));
        port = reader.bind("tcp://127.0.0.1:!");
        assertEq("tcp://127.0.0.1:" + port, reader.endpoint());

        ZSocketReq writer(">" + reader.endpoint());
        writer.setIdentity("ReqWriter");
        assertEq("ReqWriter", writer.getIdentity());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq("REQ", msg.meta("Socket-Type"));
        assertEq("", msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # cannot send another message until we get a reply from the first message
        assertThrows("ZSOCKET-SEND-ERROR", \writer.send(), HelloWorld);

        reader.send(Testing);
        msg = writer.recvMsg();
        assertEq(1, msg.size());
        assertEq(Testing.size(), msg.contentSize());
        assertEq("REP", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(Testing, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # now we can send another message
        writer.send(HelloWorld);
    }

    zSocketPubSubTest() {
        ZSocketPub writer("@tcp://127.0.0.1:!");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:!");
        ZSocketSub reader(">" + writer.endpoint(), Subscription);
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());
        writer.send(new ZMsg("XXX", HelloWorld));
        assertThrows("ZSOCKET-TIMEOUT", \reader.waitRead(), 500ms);
        reader.subscribe(Subscription);
        writer.send(new ZMsg(Subscription, HelloWorld));
        ZMsg msg = reader.recvMsg();
        assertEq(2, msg.size());
        assertEq(Subscription.size() + HelloWorld.size(), msg.contentSize());
        assertEq("PUB", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(Subscription, msg.popStr());
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());
    }

    zMsgTest() {
        ZMsg msg(Testing);
        File f();
        assertThrows("ZMSG-SAVE-ERROR", \msg.save(), f);
        string fn = tmp_location() + DirSep + get_random_string(30);
        on_exit unlink(fn);
        f.open2(fn, O_CREAT|O_WRONLY|O_TRUNC);
        assertEq(NOTHING, msg.save(f));
        assertEq(True, is_readable(fn));
        assertEq(True, hstat(fn).size > 0);

        msg.add(new ZMsg(HelloWorld));
        # calling ZMsg::popMsg() when the frame is not a message consumes the first frame
        assertEq(NOTHING, msg.popMsg());
        assertEq(1, msg.size());
        assertEq(HelloWorld.size() + 1, msg.contentSize());
        ZMsg nmsg = msg.popMsg();
        assertEq(HelloWorld, nmsg.popStr());
        assertEq(0, nmsg.size());
        assertEq(0, nmsg.contentSize());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());

        msg.add(Testing);
        msg.add(new ZMsg(HelloWorld));
        assertEq(2, msg.size());
        assertEq(HelloWorld.size() + Testing.size() + 1, msg.contentSize());
        ZFrame frame = msg.popFrame();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size() + 1, msg.contentSize());
        assertEq(True, frame.streq(Testing));
        assertEq(False, frame.streq(HelloWorld));
    }
}

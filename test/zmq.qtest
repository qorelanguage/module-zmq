#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%enable-all-warnings
%require-types
%strict-args

%requires QUnit
%requires Util
%requires zmq

%exec-class ZmqTest

class ZmqTest inherits QUnit::Test {
    public {
        const HelloWorld = "Hello, World!";
        const Testing = "testing, 1, 2, 3";
        const Subscription = "TEST";
        const DealerIdentity = "testDealer";

        const MAXINT32 = (pow(2, 31) - 1).toInt();
    }

    private:internal {
        ZContext zctx();
    }

    constructor() : QUnit::Test("ZmqTest", "1.0") {
        addTestCase("basic", \basicTest());
        addTestCase("zcontext", \zContextTest());
        addTestCase("zsocket smoke", \zSocketSmokeTest());
        addTestCase("zsocket push/pull", \zSocketPushPullTest());
        addTestCase("zsocket req/rep", \zSocketReqRepTest());
        addTestCase("zsocket pub/sub", \zSocketPubSubTest());
        addTestCase("zsocket dealer/router", \zSocketDealerRouterTest());
        addTestCase("zmsg", \zMsgTest());

        set_return_value(main());
    }

    basicTest() {
        hash<auto> h = zmq_version();
        assertEq("hash<ZmqVersionInfo>", h.fullType());
        assertEq(Type::Int, h.major.type());
        assertEq(Type::Int, h.minor.type());
        assertEq(Type::Int, h.patch.type());
        assertEq(Type::String, h.version.type());
        assertEq(h.version, sprintf("%d.%d.%d", h.major, h.minor, h.patch));
    }

    zContextTest() {
        # check default context options
        assertEq(1, zctx.getOption(ZMQ_BLOCKY));
        assertEq(0, zctx.getOption(ZMQ_IPV6));
        assertEq(1023, zctx.getOption(ZMQ_MAX_SOCKETS));
        assertEq(1, zctx.getOption(ZMQ_IO_THREADS));
        assertEq(MAXINT32, zctx.getOption(ZMQ_MAX_MSGSZ));
    }

    zMsgTest() {
        ZMsg msg(Testing);
        File f();
        assertThrows("ZMSG-SAVE-ERROR", \msg.save(), f);
        string fn = tmp_location() + DirSep + get_random_string(30);
        on_exit unlink(fn);
        f.open2(fn, O_CREAT|O_WRONLY|O_TRUNC);
        assertEq(NOTHING, msg.save(f));
        assertEq(True, is_readable(fn));
        assertEq(True, hstat(fn).size > 0);

        msg.add(new ZMsg(HelloWorld));
        # calling ZMsg::popMsg() when the frame is not a message consumes the first frame
        assertEq(NOTHING, msg.popMsg());
        assertEq(1, msg.size());
        assertEq(HelloWorld.size() + 1, msg.contentSize());
        ZMsg nmsg = msg.popMsg();
        assertEq(HelloWorld, nmsg.popStr());
        assertEq(0, nmsg.size());
        assertEq(0, nmsg.contentSize());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());

        msg.add(Testing);
        msg.add(new ZMsg(HelloWorld));
        assertEq(2, msg.size());
        assertEq(HelloWorld.size() + Testing.size() + 1, msg.contentSize());
        ZFrame frame = msg.popFrame();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size() + 1, msg.contentSize());
        assertEq(True, frame.streq(Testing));
        assertEq(False, frame.streq(HelloWorld));
    }

    zSocketSmokeTest() {
        ZSocket sock = new ZSocketSub(zctx, "@tcp://127.0.0.1:*", "xxx");
        assertEq("SUB", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        sock = new ZSocketSub(zctx, "@inproc://test", "xxx");
        assertEq("SUB", sock.type());
%ifndef Windows
        sock = new ZSocketSub(zctx, "@ipc://*", "xxx");
        assertEq("SUB", sock.type());
%endif

        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketSub(zctx, "@tcp://127.0.0.1:xxx", "xxx"); });
        sock = new ZSocketSub(zctx, "", "xxx");
        assertEq("SUB", sock.type());
        sock = new ZSocketSub(zctx);
        assertEq("SUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPub(zctx, "@tcp://127.0.0.1:*");
        assertEq("PUB", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketPub(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPub(zctx, "");
        assertEq("PUB", sock.type());
        sock = new ZSocketPub(zctx);
        assertEq("PUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketXSub(zctx, "@tcp://127.0.0.1:*");
        assertEq("XSUB", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketXSub(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXSub(zctx, "");
        assertEq("XSUB", sock.type());
        sock = new ZSocketXSub(zctx);
        assertEq("XSUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketXPub(zctx, "@tcp://127.0.0.1:*");
        assertEq("XPUB", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketXPub(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketXPub(zctx, "");
        assertEq("XPUB", sock.type());
        sock = new ZSocketXPub(zctx);
        assertEq("XPUB", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketStream(zctx, "@tcp://127.0.0.1:*");
        assertEq("STREAM", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketStream(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketStream(zctx, "");
        assertEq("STREAM", sock.type());
        sock = new ZSocketStream(zctx);
        assertEq("STREAM", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketDealer(zctx, "", "@tcp://127.0.0.1:*");
        assertEq("DEALER", sock.type());
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketDealer(zctx, "", "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketDealer(zctx, "", "");
        assertEq("DEALER", sock.type());
        sock = new ZSocketDealer(zctx);
        assertEq("DEALER", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketRouter(zctx, "", "@tcp://127.0.0.1:*");
        assertEq("ROUTER", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketRouter(zctx, "", "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRouter(zctx, "", "");
        assertEq("ROUTER", sock.type());
        sock = new ZSocketRouter(zctx);
        assertEq("ROUTER", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketReq(zctx, "", "@tcp://127.0.0.1:*");
        assertEq("REQ", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketReq(zctx, "", "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketReq(zctx, "", "");
        assertEq("REQ", sock.type());
        sock = new ZSocketReq(zctx);
        assertEq("REQ", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketRep(zctx, "", "@tcp://127.0.0.1:*");
        assertEq("REP", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketRep(zctx, "", "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketRep(zctx, "", "");
        assertEq("REP", sock.type());
        sock = new ZSocketRep(zctx);
        assertEq("REP", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPush(zctx, "@tcp://127.0.0.1:*");
        assertEq("PUSH", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketPush(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPush(zctx, "");
        assertEq("PUSH", sock.type());
        sock = new ZSocketPush(zctx);
        assertEq("PUSH", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPull(zctx, "@tcp://127.0.0.1:*");
        assertEq("PULL", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketPull(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPull(zctx, "");
        assertEq("PULL", sock.type());
        sock = new ZSocketPull(zctx);
        assertEq("PULL", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());

        sock = new ZSocketPair(zctx, "@tcp://127.0.0.1:*");
        assertEq("PAIR", sock.type());
        assertEq(True, (sock.endpoint() =~ x/:([0-9]+)/)[0].toInt() > 0);
        assertThrows("ZSOCKET-BIND-ERROR", sub () { new ZSocketPair(zctx, "@tcp://127.0.0.1:xxx"); });
        sock = new ZSocketPair(zctx, "");
        assertEq("PAIR", sock.type());
        sock = new ZSocketPair(zctx);
        assertEq("PAIR", sock.type());
        sock.setIdentity("IdTest");
        assertEq("IdTest", sock.getIdentity());
    }

    zSocketPushPullTest() {
        ZSocketPush writer(zctx, "@tcp://127.0.0.1:*");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        # monitors require "inproc://" endpoints
        assertThrows("ZSOCKET-MONITOR-ERROR", \writer.monitor(), (ZMQ_EVENT_ALL, "tcp://127.0.0.1:9999"));

        # start monitoring push Socket
        writer.monitor(ZMQ_EVENT_ALL, "inproc://mon-1");

        # event list
        list el = ();
        # "monitoring done" counter
        Counter c(1);
        # monitoring closure
        code mon1 = sub () {
            on_exit
                c.dec();
            ZSocketPair zsmon1(zctx, "inproc://mon-1");
            while (True) {
                ZMsg msg = zsmon1.recvMsg();
                ZFrame f1 = msg.popFrame();
                int event_number = f1.readi2(0);
                if (event_number == ZMQ_EVENT_MONITOR_STOPPED)
                    break;
                string estr = msg.popStr();
                int event_code = f1.readi4(2);
                if (m_options.verbose)
                    printf("EVENT: %s (%d): %y\n", ZmqEventCodeMap{event_number} ?? "unknown: ", event_code, estr);
                el += (
                    "event_number": event_number,
                    "event_code": event_code,
                    "string": estr,
                );
            }
        };
        background mon1();

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:*");
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());

        ZSocketPull reader(zctx, ">" + writer.endpoint());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq("PUSH", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # check that calling ZMsg::popMsg() when there is no submessage deletes all other content
        writer.send(HelloWorld);
        msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq(NOTHING, msg.popMsg());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq(NOTHING, msg.popStr());

        writer.send(HelloWorld);
        msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        ZFrame frame = msg.popFrame();
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq("PUSH", frame.meta("Socket-Type"));
        assertEq(NOTHING, frame.meta("Identity"));
        assertEq(NOTHING, frame.meta("Resource"));
        assertEq("127.0.0.1", frame.meta("Peer-Address"));
        assertEq(NOTHING, frame.meta("User-Id"));

        delete writer;
        delete reader;
        # wait for monitoring thread to exit
        c.waitForZero();
        assertEq(4, el.size());
    }

    zSocketReqRepTest() {
        ZSocketRep reader(zctx, "", "@tcp://*:*");
        softint port = (reader.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, reader.unbind(reader.endpoint()));
        port = reader.bind("tcp://127.0.0.1:*");
        assertEq("tcp://127.0.0.1:" + port, reader.endpoint());

        ZSocketReq writer(zctx, "", ">" + reader.endpoint());
        writer.setIdentity("ReqWriter");
        assertEq("ReqWriter", writer.getIdentity());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq("REQ", msg.meta("Socket-Type"));
        assertEq("", msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # cannot send another message until we get a reply from the first message
        assertThrows("ZSOCKET-SEND-ERROR", \writer.send(), HelloWorld);

        reader.send(Testing);
        msg = writer.recvMsg();
        assertEq(1, msg.size());
        assertEq(Testing.size(), msg.contentSize());
        assertEq("REP", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(Testing, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # now we can send another message
        writer.send(HelloWorld);

        # try connecting first, sending a message and then binding and reading the message
        string endpoint = writer.endpoint();
        delete writer;
        delete reader;

        writer = new ZSocketReq(zctx);
        writer.connect(endpoint);
        writer.send(HelloWorld);

        reader = new ZSocketRep(zctx);
        reader.bind("tcp://*:" + port);

        msg = reader.recvMsg();
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq(NOTHING, msg.popMsg());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq(NOTHING, msg.popStr());

    }

    zSocketPubSubTest() {
        ZSocketPub writer(zctx, "@tcp://127.0.0.1:*");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:0");
        ZSocketSub reader(zctx, ">" + writer.endpoint(), Subscription);
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());
        writer.send(new ZMsg("XXX", HelloWorld));
        assertThrows("ZSOCKET-TIMEOUT", \reader.waitRead(), 500ms);
        writer.send(new ZMsg(Subscription, HelloWorld));
        ZMsg msg = reader.recvMsg();
        assertEq(2, msg.size());
        assertEq(Subscription.size() + HelloWorld.size(), msg.contentSize());
        assertEq("PUB", msg.meta("Socket-Type"));
        assertEq(NOTHING, msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(Subscription, msg.popStr());
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());
    }

    zSocketDealerRouterTest() {
        ZSocketDealer writer(zctx, "", "@tcp://127.0.0.1:*");
        softint port = (writer.endpoint() =~ x/:([0-9]+)/)[0];

        assertEq(NOTHING, writer.unbind("tcp://127.0.0.1:" + port));
        port = writer.bind("tcp://127.0.0.1:*");
        assertEq("tcp://127.0.0.1:" + port, writer.endpoint());

        # create a router with the default identity
        ZSocketRouter reader(zctx, "", ">" + writer.endpoint());
        writer.send(HelloWorld);
        ZMsg msg = reader.recvMsg();
        assertEq(2, msg.size());
        ZFrame idframe = msg.popFrame();
        assertEq(5, idframe.size());
        assertEq("", idframe.meta("Identity"));
        #printf("id frame: %y\n", idframe.strhex());
        assertThrows("ZFRAME-DECODE-ERROR", \idframe.decode());

        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq("DEALER", msg.meta("Socket-Type"));
        assertEq("", msg.meta("Identity"));
        assertEq(NOTHING, msg.meta("Resource"));
        assertEq("127.0.0.1", msg.meta("Peer-Address"));
        assertEq(NOTHING, msg.meta("User-Id"));
        assertEq(HelloWorld, msg.popStr());
        assertEq(NOTHING, msg.popMsg());

        # recreate the writer
        writer = new ZSocketDealer(zctx);
        # set the dealer's identity value explicitly before binding
        writer.setIdentity(DealerIdentity);
        port = writer.bind("tcp://127.0.0.1:*");

        # recreate the reader with a default identity to connect to the new port
        reader = new ZSocketRouter(zctx, "", ">" + writer.endpoint());

        # check that calling ZMsg::popMsg() when there is no submessage deletes all other content
        writer.send(HelloWorld);
        msg = reader.recvMsg();
        assertEq(2, msg.size());
        idframe = msg.popFrame();
        assertEq(DealerIdentity.size(), idframe.size());
        assertEq(DealerIdentity, idframe.meta("Identity"));
        assertEq(HelloWorld.size(), msg.contentSize());
        assertEq(NOTHING, msg.popMsg());
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq(NOTHING, msg.popStr());

        writer.send(HelloWorld);
        msg = reader.recvMsg();
        idframe = msg.popFrame();
        assertEq(DealerIdentity.size(), idframe.size());
        assertEq(DealerIdentity, idframe.meta("Identity"));
        assertEq(1, msg.size());
        assertEq(HelloWorld.size(), msg.contentSize());
        ZFrame frame = msg.popFrame();
        assertEq(0, msg.size());
        assertEq(0, msg.contentSize());
        assertEq("DEALER", frame.meta("Socket-Type"));
        assertEq(DealerIdentity, frame.meta("Identity"));
        assertEq(NOTHING, frame.meta("Resource"));
        assertEq("127.0.0.1", frame.meta("Peer-Address"));
        assertEq(NOTHING, frame.meta("User-Id"));
    }
}
